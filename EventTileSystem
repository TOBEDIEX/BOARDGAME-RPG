-- EventTileSystem.lua
-- ‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ö‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡πÄ‡∏Å‡∏° (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ 100%)
-- Version: 1.1.0

local EventTileSystem = {}
EventTileSystem.__index = EventTileSystem

-- Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local ServerStorage = game:GetService("ServerStorage")
local Players = game:GetService("Players")

-- Debug mode
local DEBUG_MODE = true

-- Helper function for debug logging
local function debugLog(message)
	if DEBUG_MODE then
		print("[EventTileSystem] " .. message)
	end
end

function EventTileSystem.new(gameManager)
	local self = setmetatable({}, EventTileSystem)

	-- Reference to game manager
	self.gameManager = gameManager

	-- Initialize event handlers for different tile types
	self.tileHandlers = {
		money = self.HandleMoneyTile,
		shop = self.HandleShopTile,
		battle = self.HandleBattleTile,
		casino = self.HandleCasinoTile,
		item = self.HandleItemTile,
		-- Add more handlers as needed
	}

	-- Initialize remote events
	self:InitializeRemotes()

	-- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
	self:SetupTestingHooks()

	print("================ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏© (Event Tile System) ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß! ================")
	debugLog("EventTileSystem ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

	return self
end

function EventTileSystem:InitializeRemotes()
	local remotes = ReplicatedStorage:WaitForChild("Remotes")

	-- Create EventTileRemotes folder if it doesn't exist
	local eventTileRemotes = remotes:FindFirstChild("EventTileRemotes")
	if not eventTileRemotes then
		eventTileRemotes = Instance.new("Folder")
		eventTileRemotes.Name = "EventTileRemotes"
		eventTileRemotes.Parent = remotes
		debugLog("‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå EventTileRemotes")
	end

	-- Create MoneyEvent RemoteEvent if it doesn't exist
	self.moneyEventRemote = eventTileRemotes:FindFirstChild("MoneyEvent")
	if not self.moneyEventRemote then
		self.moneyEventRemote = Instance.new("RemoteEvent")
		self.moneyEventRemote.Name = "MoneyEvent"
		self.moneyEventRemote.Parent = eventTileRemotes
		debugLog("‡∏™‡∏£‡πâ‡∏≤‡∏á MoneyEvent RemoteEvent")
	end

	-- Add more remote events for other tile types as needed

	debugLog("Remote events ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß")
end

-- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö
function EventTileSystem:SetupTestingHooks()
	-- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏ô global environment ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å Command Bar
	_G.TestEventTile = function(player, tileType, tileId)
		if not player then 
			local players = Players:GetPlayers()
			if #players == 0 then
				print("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ô‡πÄ‡∏Å‡∏°")
				return
			end
			player = players[1]
		end

		tileType = tileType or "money"
		tileId = tileId or 13

		print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ä‡πà‡∏≠‡∏á " .. tileType .. " (ID: " .. tileId .. ") ‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô " .. player.Name)
		self:ProcessTileEvent(player, tileId, tileType)
	end

	debugLog("‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß (_G.TestEventTile)")
end

-- Process a tile event when a player lands on it
function EventTileSystem:ProcessTileEvent(player, tileId, tileType)
	print("‚ñ∂Ô∏è [EventTileSystem] ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô " .. player.Name .. " ‡∏ï‡∏Å‡∏ä‡πà‡∏≠‡∏á " .. tileId .. " ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó " .. tileType)

	-- Get handler for this tile type
	local handler = self.tileHandlers[tileType]

	if handler then
		-- Call the appropriate handler
		local success = handler(self, player, tileId)
		print("‚úÖ [EventTileSystem] ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ä‡πà‡∏≠‡∏á " .. tileType .. " ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: " .. tostring(success))
		return success
	else
		print("‚ùå [EventTileSystem] ‡πÑ‡∏°‡πà‡∏û‡∏ö handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó " .. tileType)
		return false
	end
end

-- Handler for money tile
function EventTileSystem:HandleMoneyTile(player, tileId)
	print("üí∞ [EventTileSystem] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô " .. player.Name)

	-- Generate random money amount (500 to 2000)
	local minAmount = 500
	local maxAmount = 2000
	local moneyAmount = math.random(minAmount, maxAmount)

	print("üí∞ [EventTileSystem] ‡∏™‡∏∏‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô: " .. moneyAmount)

	-- Fire client event to show money randomizer UI
	self.moneyEventRemote:FireClient(player, moneyAmount)

	-- Update player's money in the PlayerManager
	if self.gameManager and self.gameManager.playerManager then
		local playerData = self.gameManager.playerManager:GetPlayerData(player)

		if playerData then
			-- Record old money for logging
			local oldMoney = playerData.stats.money

			-- Update player's money
			local newMoney = oldMoney + moneyAmount
			local success = self.gameManager.playerManager:UpdatePlayerStats(player, {
				money = newMoney
			})

			print("üí∞ [EventTileSystem] ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô " .. player.Name .. " ‡∏à‡∏≤‡∏Å " .. oldMoney .. " ‡πÄ‡∏õ‡πá‡∏ô " .. newMoney)

			if not success then
				print("‚ùå [EventTileSystem] ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏à‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ UpdatePlayerHP ‡πÅ‡∏ó‡∏ô")
				-- ‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ñ‡πâ‡∏≤ UpdatePlayerStats ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
				playerData.stats.money = newMoney

				-- ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏Ñ‡∏•‡πÄ‡∏≠‡∏ô‡∏ï‡πå
				if self.gameManager.playerManager.statChangedEvent then
					self.gameManager.playerManager.statChangedEvent:FireClient(player, {
						money = {
							oldValue = oldMoney,
							newValue = newMoney
						}
					})
				end

				-- ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
				if self.gameManager.playerManager.SyncPlayerStats then
					self.gameManager.playerManager:SyncPlayerStats(player)
				end
			end

			return true
		else
			warn("[EventTileSystem] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö " .. player.Name)

			-- ‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏£‡∏ì‡∏µ‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô: ‡∏™‡πà‡∏á RemoteEvent ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÄ‡∏á‡∏¥‡∏ô
			print("‚ö†Ô∏è [EventTileSystem] ‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå UI ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏á‡∏¥‡∏ô")
			return true
		end
	else
		warn("[EventTileSystem] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á PlayerManager ‡πÑ‡∏î‡πâ")

		-- ‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏£‡∏ì‡∏µ‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô: ‡∏™‡πà‡∏á RemoteEvent ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÄ‡∏á‡∏¥‡∏ô
		print("‚ö†Ô∏è [EventTileSystem] ‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå UI ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏á‡∏¥‡∏ô")
		return true
	end
end

-- Placeholder for other tile handlers
function EventTileSystem:HandleShopTile(player, tileId)
	debugLog("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ä‡πà‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô " .. player.Name)
	-- Implementation will be added later
	return true
end

function EventTileSystem:HandleBattleTile(player, tileId)
	debugLog("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ä‡πà‡∏≠‡∏á‡∏ï‡πà‡∏≠‡∏™‡∏π‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô " .. player.Name)
	-- Implementation will be added later
	return true
end

function EventTileSystem:HandleCasinoTile(player, tileId)
	debugLog("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡∏≤‡∏™‡∏¥‡πÇ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô " .. player.Name)
	-- Implementation will be added later
	return true
end

function EventTileSystem:HandleItemTile(player, tileId)
	debugLog("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ä‡πà‡∏≠‡∏á‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô " .. player.Name)
	-- Implementation will be added later
	return true
end

-- ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
function EventTileSystem:TestWithPlayer(player, tileType, tileId)
	tileType = tileType or "money"
	tileId = tileId or 13

	print("üß™ [EventTileSystem] ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ä‡πà‡∏≠‡∏á " .. tileType .. " ‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô " .. player.Name)
	self:ProcessTileEvent(player, tileId, tileType)
end

-- Set debug mode
function EventTileSystem:SetDebugMode(enabled)
	DEBUG_MODE = enabled
	print("[EventTileSystem] Debug mode " .. (enabled and "enabled" or "disabled"))
end

return EventTileSystem
