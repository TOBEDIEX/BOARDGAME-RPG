-- ClassSelectionHandler.lua
-- Manages character class selection screen
-- Version: 3.0.1 (Fixed transition issues)

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- Get current player
local player = Players.LocalPlayer
if not player then
	-- Wait if LocalPlayer is not available yet
	Players:GetPropertyChangedSignal("LocalPlayer"):Wait()
	player = Players.LocalPlayer
end

-- Main UI references
local PlayerGui
local ClassSelection, Background, TitleText, ClassesContainer
local ConfirmButton, TimerFrame, TimerText, PlayersSelectionStatus

-- Class references
local WarriorClass, MageClass, ThiefClass

-- RemoteEvents references
local remotes = {
	playerSelectedClass = nil,
	updateClassSelection = nil,
	updateClassSelectionTimer = nil,
	classAssigned = nil,
	notifyRandomClass = nil,
	showMainGameUI = nil
}

-- Selection state
local selectionState = {
	selectedClass = nil,  -- Currently selected class
	isConfirmed = false,  -- Whether selection is confirmed
	playerSelections = {}, -- Player selections {[userId] = className}
	playerFrames = {},    -- References to player status frames
	timerValue = 30,      -- Remaining selection time
	isTimerActive = false -- Timer active status
}

-- Track connections
local connections = {}

-- Standard colors for UI (stored for reuse to reduce Color3 creation)
local COLORS = {
	DEFAULT_FRAME = Color3.fromRGB(50, 50, 70),  -- Default class frame color
	SELECTED_FRAME = Color3.fromRGB(60, 90, 140), -- Selected class frame color
	HOVER_FRAME = Color3.fromRGB(60, 70, 100),   -- Hover class frame color
	DEFAULT_STROKE = Color3.fromRGB(100, 100, 150), -- Default stroke color
	SELECTED_STROKE = Color3.fromRGB(100, 200, 255), -- Selected stroke color
	CONFIRM_ENABLED = Color3.fromRGB(40, 140, 60), -- Enabled confirm button color
	CONFIRM_DISABLED = Color3.fromRGB(60, 60, 80), -- Disabled confirm button color
	TIMER_NORMAL = Color3.fromRGB(255, 255, 255), -- Normal timer color
	TIMER_WARNING = Color3.fromRGB(255, 150, 50), -- Warning timer color (running low)
	TIMER_CRITICAL = Color3.fromRGB(255, 50, 50)  -- Critical timer color (very low)
}

-- Tween control variables
local tweenInfo = {
	fast = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
	normal = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
	slow = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
	bounce = TweenInfo.new(0.4, Enum.EasingStyle.Bounce, Enum.EasingDirection.Out)
}

-- UI update frequency control variables
local lastUpdateTime = 0
local updateThreshold = 0.05 -- 50ms

-- Clean up all connections to prevent memory leaks
local function cleanupConnections()
	for _, connection in ipairs(connections) do
		if typeof(connection) == "RBXScriptConnection" and connection.Connected then
			connection:Disconnect()
		end
	end
	connections = {}
end

-- Apply special effects to UI elements
local function applyUIEffects()
	-- Make class frames slightly transparent
	for _, classFrame in pairs({WarriorClass, MageClass, ThiefClass}) do
		if classFrame then
			classFrame.BackgroundTransparency = 0.1

			-- Add UIStroke if none exists
			if not classFrame:FindFirstChild("UIStroke") then
				local stroke = Instance.new("UIStroke")
				stroke.Color = COLORS.DEFAULT_STROKE
				stroke.Thickness = 2
				stroke.Parent = classFrame
			end

			-- Add hover effects
			classFrame.MouseEnter:Connect(function()
				if selectionState.selectedClass == nil or 
					(classFrame.Name:sub(1, -6) ~= selectionState.selectedClass) then
					local highlightTween = TweenService:Create(
						classFrame, 
						tweenInfo.fast,
						{BackgroundColor3 = COLORS.HOVER_FRAME}
					)
					highlightTween:Play()
				end
			end)

			classFrame.MouseLeave:Connect(function()
				if selectionState.selectedClass == nil or 
					(classFrame.Name:sub(1, -6) ~= selectionState.selectedClass) then
					local defaultTween = TweenService:Create(
						classFrame, 
						tweenInfo.fast,
						{BackgroundColor3 = COLORS.DEFAULT_FRAME}
					)
					defaultTween:Play()
				end
			end)
		end
	end

	-- Add confirm button effects
	if ConfirmButton then
		-- Add UIStroke if none exists
		if not ConfirmButton:FindFirstChild("UIStroke") then
			local stroke = Instance.new("UIStroke")
			stroke.Color = COLORS.DEFAULT_STROKE
			stroke.Thickness = 2
			stroke.Parent = ConfirmButton
		end

		-- Get button text
		local confirmText = ConfirmButton:FindFirstChild("ConfirmText")
		if confirmText then
			confirmText.Text = "Confirm Selection"
		end

		-- Add hover effects
		ConfirmButton.MouseEnter:Connect(function()
			if selectionState.selectedClass and not selectionState.isConfirmed then
				local scaleTween = TweenService:Create(
					ConfirmButton, 
					tweenInfo.fast,
					{Size = UDim2.new(ConfirmButton.Size.X.Scale * 1.05, 0, ConfirmButton.Size.Y.Scale * 1.05, 0)}
				)
				scaleTween:Play()
			end
		end)

		ConfirmButton.MouseLeave:Connect(function()
			if selectionState.selectedClass and not selectionState.isConfirmed then
				local scaleTween = TweenService:Create(
					ConfirmButton, 
					tweenInfo.fast,
					{Size = UDim2.new(ConfirmButton.Size.X.Scale / 1.05, 0, ConfirmButton.Size.Y.Scale / 1.05, 0)}
				)
				scaleTween:Play()
			end
		end)
	end

	-- Add effects to timer
	if TimerFrame then
		-- Add UIStroke if none exists
		if not TimerFrame:FindFirstChild("UIStroke") then
			local stroke = Instance.new("UIStroke")
			stroke.Color = Color3.fromRGB(180, 180, 180)
			stroke.Thickness = 2
			stroke.Parent = TimerFrame
		end
	end
end

-- Initialize UI with validation checks
local function initializeUI()
	print("ClassSelectionHandler: Initializing UI...")

	-- Get PlayerGui with validation check
	PlayerGui = player:WaitForChild("PlayerGui", 10)
	if not PlayerGui then
		warn("ClassSelectionHandler: PlayerGui not found within timeout")
		return false
	end

	-- Get ClassSelection UI with validation
	ClassSelection = PlayerGui:WaitForChild("ClassSelection", 5)
	if not ClassSelection then
		warn("ClassSelectionHandler: ClassSelection not found within timeout")
		return false
	end

	-- Get UI components with validation
	Background = ClassSelection:WaitForChild("Background", 3)
	if not Background then
		warn("ClassSelectionHandler: Background not found within timeout")
		return false
	end

	-- Get main components of class selection screen
	TitleText = Background:WaitForChild("TitleText", 2)
	ClassesContainer = Background:WaitForChild("ClassesContainer", 2)
	ConfirmButton = Background:WaitForChild("ConfirmButton", 2)
	TimerFrame = Background:WaitForChild("TimerFrame", 2)

	-- Check text and status components
	if TimerFrame then
		TimerText = TimerFrame:WaitForChild("TimerText", 1)
	end

	PlayersSelectionStatus = Background:WaitForChild("PlayersSelectionStatus", 2)

	-- Check if required components exist
	if not TitleText or not ClassesContainer or not ConfirmButton or 
		not TimerFrame or not TimerText or not PlayersSelectionStatus then
		warn("ClassSelectionHandler: Some UI components are not ready")
		return false
	end

	-- Get class elements
	WarriorClass = ClassesContainer:FindFirstChild("WarriorClass")
	MageClass = ClassesContainer:FindFirstChild("MageClass")
	ThiefClass = ClassesContainer:FindFirstChild("ThiefClass")

	-- Validate class components
	if not WarriorClass or not MageClass or not ThiefClass then
		warn("ClassSelectionHandler: Class components are incomplete")
		return false
	end

	-- Set initial UI states
	ClassSelection.Enabled = true
	TimerText.Text = "Time remaining: " .. selectionState.timerValue .. " seconds"

	-- Setup user-friendly UI effects
	applyUIEffects()

	print("ClassSelectionHandler: UI initialization complete")
	return true
end


-- Connect to RemoteEvents with validation checks
local function connectRemoteEvents()
	print("ClassSelectionHandler: Connecting to RemoteEvents...")

	-- Get RemoteEvents with validation
	local remotesFolder = ReplicatedStorage:WaitForChild("Remotes", 10)
	if not remotesFolder then
		warn("ClassSelectionHandler: Remotes folder not found within timeout")
		return false
	end

	local uiRemotes = remotesFolder:WaitForChild("UIRemotes", 5)
	local gameRemotes = remotesFolder:WaitForChild("GameRemotes", 5)

	if not uiRemotes or not gameRemotes then
		warn("ClassSelectionHandler: UIRemotes or GameRemotes folder not found within timeout")
		return false
	end

	-- Reference RemoteEvents
	remotes.playerSelectedClass = uiRemotes:WaitForChild("PlayerSelectedClass", 3)
	remotes.updateClassSelection = uiRemotes:WaitForChild("UpdateClassSelection", 3)
	remotes.updateClassSelectionTimer = uiRemotes:WaitForChild("UpdateClassSelectionTimer", 3)
	remotes.classAssigned = uiRemotes:WaitForChild("ClassAssigned", 3)
	remotes.notifyRandomClass = uiRemotes:WaitForChild("NotifyRandomClass", 3)
	remotes.showMainGameUI = uiRemotes:WaitForChild("ShowMainGameUI", 3)

	-- Verify all needed RemoteEvents are available
	for name, remote in pairs(remotes) do
		if not remote then
			warn("ClassSelectionHandler: RemoteEvent " .. name .. " not found")
			return false
		end
	end

	print("ClassSelectionHandler: RemoteEvents connected successfully")
	return true
end

-- Update class display
local function updateClassVisuals()
	-- Control update frequency
	local currentTime = tick()
	if currentTime - lastUpdateTime < updateThreshold then return end
	lastUpdateTime = currentTime

	-- Reset display for all classes
	for _, classFrame in pairs({WarriorClass, MageClass, ThiefClass}) do
		if classFrame then
			-- Set default background
			local defaultTween = TweenService:Create(
				classFrame,
				tweenInfo.normal,
				{
					BackgroundColor3 = COLORS.DEFAULT_FRAME,
					BackgroundTransparency = 0.1
				}
			)
			defaultTween:Play()

			-- Set default UIStroke
			local stroke = classFrame:FindFirstChild("UIStroke")
			if stroke then
				stroke.Color = COLORS.DEFAULT_STROKE
				stroke.Thickness = 2
			end
		end
	end

	-- Highlight selected class
	if selectionState.selectedClass then
		local selectedFrame
		if selectionState.selectedClass == "Warrior" then
			selectedFrame = WarriorClass
		elseif selectionState.selectedClass == "Mage" then
			selectedFrame = MageClass
		elseif selectionState.selectedClass == "Thief" then
			selectedFrame = ThiefClass
		end

		if selectedFrame then
			-- Highlight background
			local highlightTween = TweenService:Create(
				selectedFrame,
				tweenInfo.normal,
				{
					BackgroundColor3 = COLORS.SELECTED_FRAME,
					BackgroundTransparency = 0
				}
			)
			highlightTween:Play()

			-- Highlight border
			local stroke = selectedFrame:FindFirstChild("UIStroke")
			if stroke then
				stroke.Color = COLORS.SELECTED_STROKE
				stroke.Thickness = 3
			end
		end
	end

	-- Update confirm button
	if ConfirmButton then
		-- Set button state based on selection
		if selectionState.selectedClass and not selectionState.isConfirmed then
			-- Button is active
			ConfirmButton.BackgroundColor3 = COLORS.CONFIRM_ENABLED
			ConfirmButton.Active = true
			ConfirmButton.AutoButtonColor = true

			local stroke = ConfirmButton:FindFirstChild("UIStroke")
			if stroke then
				stroke.Color = Color3.fromRGB(100, 255, 100)
				stroke.Thickness = 2
			end

			local confirmText = ConfirmButton:FindFirstChild("ConfirmText")
			if confirmText then
				confirmText.TextColor3 = Color3.fromRGB(255, 255, 255)
			end
		else
			-- Button is inactive
			ConfirmButton.BackgroundColor3 = COLORS.CONFIRM_DISABLED

			if selectionState.isConfirmed then
				ConfirmButton.Active = false
				ConfirmButton.AutoButtonColor = false

				local confirmText = ConfirmButton:FindFirstChild("ConfirmText")
				if confirmText then
					confirmText.Text = "Waiting for others..."
					confirmText.TextColor3 = Color3.fromRGB(200, 200, 200)
				end
			else
				ConfirmButton.Active = false

				local stroke = ConfirmButton:FindFirstChild("UIStroke")
				if stroke then
					stroke.Color = Color3.fromRGB(150, 150, 150)
					stroke.Thickness = 1
				end

				local confirmText = ConfirmButton:FindFirstChild("ConfirmText")
				if confirmText then
					confirmText.TextColor3 = Color3.fromRGB(200, 200, 200)
				end
			end
		end
	end
end

-- Class selection function
local function selectClass(className)
	-- Check confirmation status
	if selectionState.isConfirmed then return end

	-- Validate class name
	if className ~= "Warrior" and className ~= "Mage" and className ~= "Thief" then
		warn("ClassSelectionHandler: Invalid class name: " .. tostring(className))
		return
	end

	-- Set selected class
	selectionState.selectedClass = className

	-- Update display
	updateClassVisuals()

	-- Show selection effect
	local selectedFrame
	if className == "Warrior" then
		selectedFrame = WarriorClass
	elseif className == "Mage" then
		selectedFrame = MageClass
	elseif className == "Thief" then
		selectedFrame = ThiefClass
	end

	if selectedFrame then
		-- Create selection effect
		local pulseTween = TweenService:Create(
			selectedFrame,
			tweenInfo.bounce,
			{Size = UDim2.new(selectedFrame.Size.X.Scale * 1.05, 0, selectedFrame.Size.Y.Scale * 1.05, 0)}
		)
		pulseTween:Play()

		pulseTween.Completed:Connect(function()
			if selectionState.selectedClass == className then
				local returnTween = TweenService:Create(
					selectedFrame,
					tweenInfo.normal,
					{Size = UDim2.new(selectedFrame.Size.X.Scale / 1.05, 0, selectedFrame.Size.Y.Scale / 1.05, 0)}
				)
				returnTween:Play()
			end
		end)
	end

	print("ClassSelectionHandler: Selected class " .. className)
end

-- Update timer function
local function updateTimer(timeLeft)
	-- Validate received value
	if type(timeLeft) ~= "number" then
		warn("ClassSelectionHandler: Invalid time value:", timeLeft)
		return
	end

	-- Record time value
	selectionState.timerValue = timeLeft

	-- Update display
	if TimerText then
		TimerText.Text = "Time remaining: " .. timeLeft .. " seconds"

		-- Change color based on remaining time
		if timeLeft <= 5 then
			TimerText.TextColor3 = COLORS.TIMER_CRITICAL

			-- Add flashing effect when time is very low
			local flashTween = TweenService:Create(
				TimerFrame,
				TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, true),
				{BackgroundColor3 = Color3.fromRGB(200, 50, 50)}
			)
			flashTween:Play()
		elseif timeLeft <= 10 then
			TimerText.TextColor3 = COLORS.TIMER_WARNING
		else
			TimerText.TextColor3 = COLORS.TIMER_NORMAL
		end
	end

	-- If time runs out and no selection made, show notification
	if timeLeft == 0 and not selectionState.isConfirmed then
		-- Notification will be handled by notifyRandomClass RemoteEvent
		print("ClassSelectionHandler: Time's up, waiting for random class")
	end
end

-- Update player selection status
local function updatePlayerSelectionStatus(userId, className)
	-- Validate received value
	if type(userId) ~= "number" then
		warn("ClassSelectionHandler: Invalid userId:", userId)
		return
	end

	-- Record player selection
	selectionState.playerSelections[userId] = className

	-- Find or create player status frame
	if not selectionState.playerFrames[userId] then
		-- Look for template
		local template = PlayersSelectionStatus:FindFirstChild("PlayerStatus")

		if template then
			-- Create new status display from template
			local newStatus = template:Clone()
			newStatus.Visible = true
			newStatus.Name = "PlayerStatus_" .. userId

			-- Find player name
			local playerName = "Player"
			for _, p in pairs(Players:GetPlayers()) do
				if p.UserId == userId then
					playerName = p.Name
					break
				end
			end

			-- Set initial text
			newStatus.Text = playerName .. ": Selecting..."

			-- Set position in list
			local playerCount = 0
			for _ in pairs(selectionState.playerFrames) do
				playerCount = playerCount + 1
			end
			newStatus.LayoutOrder = playerCount + 1

			-- Store reference
			selectionState.playerFrames[userId] = newStatus

			-- Display
			newStatus.Parent = PlayersSelectionStatus
		else
			warn("ClassSelectionHandler: PlayerStatus template not found")
			return
		end
	end

	-- Update display
	local statusFrame = selectionState.playerFrames[userId]
	if statusFrame and className then
		-- Find player name
		local playerName = "Player"
		for _, p in pairs(Players:GetPlayers()) do
			if p.UserId == userId then
				playerName = p.Name
				break
			end
		end

		-- Update text and color
		statusFrame.Text = playerName .. ": " .. className
		statusFrame.TextColor3 = Color3.fromRGB(100, 255, 100) -- Green color

		-- Add selection effect
		local pulseTween = TweenService:Create(
			statusFrame,
			tweenInfo.normal,
			{TextSize = statusFrame.TextSize + 2}
		)
		pulseTween:Play()

		pulseTween.Completed:Connect(function()
			local returnTween = TweenService:Create(
				statusFrame,
				tweenInfo.normal,
				{TextSize = statusFrame.TextSize - 2}
			)
			returnTween:Play()
		end)
	end

	-- Update player count display
	local selectedCount = 0
	local totalPlayers = #Players:GetPlayers()

	for _, selection in pairs(selectionState.playerSelections) do
		if selection then
			selectedCount = selectedCount + 1
		end
	end

	-- Show selection count in title
	if TitleText then
		TitleText.Text = "Select Your Character Class (" .. selectedCount .. "/" .. totalPlayers .. ")"
	end

	-- Check if everyone has selected
	if selectedCount >= totalPlayers and totalPlayers > 0 then
		print("ClassSelectionHandler: All players have selected")
	end
end

-- Selection confirmation function
local function confirmSelection()
	-- Check if class is selected and not already confirmed
	if not selectionState.selectedClass or selectionState.isConfirmed then
		return
	end

	-- Set confirmation status
	selectionState.isConfirmed = true

	-- Disable buttons and class selection
	for _, classFrame in pairs({WarriorClass, MageClass, ThiefClass}) do
		if classFrame then
			classFrame.Active = false
		end
	end

	-- Update confirm button
	if ConfirmButton then
		ConfirmButton.Active = false
		ConfirmButton.AutoButtonColor = false

		-- Confirm button effect
		local confirmTween = TweenService:Create(
			ConfirmButton,
			tweenInfo.normal,
			{
				BackgroundColor3 = Color3.fromRGB(30, 100, 30),
				BackgroundTransparency = 0.3
			}
		)
		confirmTween:Play()

		-- Update text
		local confirmText = ConfirmButton:FindFirstChild("ConfirmText")
		if confirmText then
			confirmText.Text = "Waiting for others..."
		end
	end

	-- Send data to server
	if remotes.playerSelectedClass then
		remotes.playerSelectedClass:FireServer(selectionState.selectedClass)
		print("ClassSelectionHandler: Sent class selection " .. selectionState.selectedClass .. " to server")
	else
		warn("ClassSelectionHandler: PlayerSelectedClass RemoteEvent not found")
	end

	-- Update own selection status
	updatePlayerSelectionStatus(player.UserId, selectionState.selectedClass)
end

-- Handle random class assignment notification
local function handleRandomClassAssignment(className)
	-- Validate received value
	if type(className) ~= "string" then
		warn("ClassSelectionHandler: Invalid class name:", className)
		return
	end

	print("ClassSelectionHandler: Received random class assignment " .. className)

	-- Select the assigned random class
	selectClass(className)

	-- Create notification
	local notification = Instance.new("Frame")
	notification.Name = "RandomClassNotification"
	notification.Size = UDim2.new(0.6, 0, 0.15, 0)
	notification.Position = UDim2.new(0.2, 0, -0.2, 0) -- Start off-screen
	notification.BackgroundColor3 = Color3.fromRGB(200, 80, 80)
	notification.BackgroundTransparency = 0.2
	notification.BorderSizePixel = 0
	notification.ZIndex = 10

	-- Add UICorner
	local corner = Instance.new("UICorner")
	corner.CornerRadius = UDim.new(0, 8)
	corner.Parent = notification

	-- Add UIStroke
	local stroke = Instance.new("UIStroke")
	stroke.Color = Color3.fromRGB(255, 150, 150)
	stroke.Thickness = 3
	stroke.Parent = notification

	-- Add notification text
	local notificationText = Instance.new("TextLabel")
	notificationText.Size = UDim2.new(1, 0, 1, 0)
	notificationText.BackgroundTransparency = 1
	notificationText.Text = "Time's up! System randomly selected " .. className .. " for you"
	notificationText.TextColor3 = Color3.fromRGB(255, 255, 255)
	notificationText.TextSize = 20
	notificationText.Font = Enum.Font.GothamBold
	notificationText.TextWrapped = true
	notificationText.ZIndex = 11
	notificationText.Parent = notification

	-- Display on screen
	notification.Parent = Background

	-- Slide-in effect
	local slideTween = TweenService:Create(
		notification,
		tweenInfo.slow,
		{Position = UDim2.new(0.2, 0, 0.1, 0)}
	)
	slideTween:Play()

	-- Confirm selection after displaying notification
	wait(0.8)
	confirmSelection()

	-- Hide notification after 3 seconds
	wait(3)
	local hideTween = TweenService:Create(
		notification,
		tweenInfo.normal,
		{
			Position = UDim2.new(0.2, 0, -0.2, 0),
			BackgroundTransparency = 1
		}
	)
	hideTween:Play()

	hideTween.Completed:Connect(function()
		notification:Destroy()
	end)
end

-- Transition to main game screen
local function transitionToMainGame()
	print("ClassSelectionHandler: Transitioning to main game screen...")

	-- Fade out effect
	local fadeOutTween = TweenService:Create(
		Background,
		tweenInfo.slow,
		{BackgroundTransparency = 1}
	)

	-- Make other elements transparent too with proper type checking
	local fadeElements = {}
	for _, element in pairs(Background:GetDescendants()) do
		if element:IsA("Frame") or element:IsA("ImageLabel") or element:IsA("ImageButton") then
			-- Elements with only BackgroundTransparency
			table.insert(fadeElements, {
				element = element,
				properties = {BackgroundTransparency = 1}
			})
		elseif element:IsA("TextLabel") or element:IsA("TextButton") then
			-- Elements with both BackgroundTransparency and TextTransparency
			table.insert(fadeElements, {
				element = element,
				properties = {BackgroundTransparency = 1, TextTransparency = 1}
			})
		end
	end

	-- Create tween for each element
	for _, item in pairs(fadeElements) do
		local elementTween = TweenService:Create(
			item.element,
			tweenInfo.slow,
			item.properties
		)
		elementTween:Play()
	end

	-- Play fade out
	fadeOutTween:Play()

	-- When fade out completes, disable class selection and enable main game UI
	fadeOutTween.Completed:Connect(function()
		-- Disable class selection
		ClassSelection.Enabled = false

		-- Find main game UI
		local MainGameUI = PlayerGui:WaitForChild("MainGameUI", 5)
		if MainGameUI then
			-- Start with transparency
			MainGameUI.Enabled = true

			-- Find main element of main game UI
			local mainBackground = MainGameUI:FindFirstChild("StatusBarContainer")
			if mainBackground then
				mainBackground.BackgroundTransparency = 1

				-- Fade in main game UI
				local fadeInTween = TweenService:Create(
					mainBackground,
					tweenInfo.slow,
					{BackgroundTransparency = 1}
				)
				fadeInTween:Play()
			end

			print("ClassSelectionHandler: Successfully transitioned to main game screen")
		else
			warn("ClassSelectionHandler: Main game UI not found")
		end

		-- Clean up resources and connections
		cleanupConnections()
	end)
end

-- Setup button and input connections
local function setupButtonConnections()
	print("ClassSelectionHandler: Setting up button connections...")

	-- Clear previous connections
	cleanupConnections()

	-- Function to connect class button
	local function connectClassButton(classButton, className)
		if not classButton then return end

		local connection = classButton.InputBegan:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 or 
				input.UserInputType == Enum.UserInputType.Touch then
				selectClass(className)
			end
		end)

		table.insert(connections, connection)
	end

	-- Connect to class buttons
	connectClassButton(WarriorClass, "Warrior")
	connectClassButton(MageClass, "Mage")
	connectClassButton(ThiefClass, "Thief")

	-- Connect to confirm button
	if ConfirmButton then
		local connection = ConfirmButton.InputBegan:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 or 
				input.UserInputType == Enum.UserInputType.Touch then
				confirmSelection()
			end
		end)

		table.insert(connections, connection)
	end

	-- Connect to Enter key press for confirmation
	local connection = UserInputService.InputBegan:Connect(function(input)
		-- Press Enter to confirm
		if input.KeyCode == Enum.KeyCode.Return and selectionState.selectedClass and not selectionState.isConfirmed then
			confirmSelection()
		end
	end)

	table.insert(connections, connection)

	print("ClassSelectionHandler: Button connections setup complete")
end

-- Setup RemoteEvent connections
local function setupRemoteConnections()
	print("ClassSelectionHandler: Setting up RemoteEvent connections...")

	-- Connect to RemoteEvents
	if remotes.updateClassSelection then
		local connection = remotes.updateClassSelection.OnClientEvent:Connect(function(userId, className)
			updatePlayerSelectionStatus(userId, className)
		end)

		table.insert(connections, connection)
	end

	if remotes.updateClassSelectionTimer then
		local connection = remotes.updateClassSelectionTimer.OnClientEvent:Connect(function(timeLeft)
			updateTimer(timeLeft)
		end)

		table.insert(connections, connection)
	end

	if remotes.notifyRandomClass then
		local connection = remotes.notifyRandomClass.OnClientEvent:Connect(function(className)
			handleRandomClassAssignment(className)
		end)

		table.insert(connections, connection)
	end

	if remotes.showMainGameUI then
		local connection = remotes.showMainGameUI.OnClientEvent:Connect(function()
			transitionToMainGame()
		end)

		table.insert(connections, connection)
	end

	-- Connect to player count changes
	local connection = Players.PlayerAdded:Connect(function()
		wait() -- Wait for player addition to complete

		-- Update player count in title
		local selectedCount = 0
		for _, selection in pairs(selectionState.playerSelections) do
			if selection then
				selectedCount = selectedCount + 1
			end
		end

		if TitleText then
			TitleText.Text = "Select Your Character Class (" .. selectedCount .. "/" .. #Players:GetPlayers() .. ")"
		end
	end)

	table.insert(connections, connection)

	connection = Players.PlayerRemoving:Connect(function(plr)
		wait() -- Wait for player removal to complete

		-- Remove data for player who left
		if selectionState.playerSelections[plr.UserId] then
			selectionState.playerSelections[plr.UserId] = nil
		end

		if selectionState.playerFrames[plr.UserId] then
			selectionState.playerFrames[plr.UserId]:Destroy()
			selectionState.playerFrames[plr.UserId] = nil
		end

		-- Update player count in title
		local selectedCount = 0
		for _, selection in pairs(selectionState.playerSelections) do
			if selection then
				selectedCount = selectedCount + 1
			end
		end

		if TitleText then
			TitleText.Text = "Select Your Character Class (" .. selectedCount .. "/" .. #Players:GetPlayers() .. ")"
		end
	end)

	table.insert(connections, connection)

	print("ClassSelectionHandler: RemoteEvent connections setup complete")
end

-- Initialization function
local function initialize()
	print("ClassSelectionHandler v3.0.1: Starting system...")

	-- Setup UI
	if not initializeUI() then
		warn("ClassSelectionHandler: Unable to initialize UI")
		return
	end

	-- Connect to RemoteEvents
	if not connectRemoteEvents() then
		warn("ClassSelectionHandler: Unable to connect to RemoteEvents")
		return
	end

	-- Setup button connections
	setupButtonConnections()

	-- Setup RemoteEvent connections
	setupRemoteConnections()

	-- Update initial display
	updateClassVisuals()

	-- Update initial player count
	if TitleText then
		TitleText.Text = "Select Your Character Class (0/" .. #Players:GetPlayers() .. ")"
	end

	-- Show current player status (self)
	updatePlayerSelectionStatus(player.UserId)

	print("ClassSelectionHandler: System started successfully")
end

-- Setup cleanup when player leaves
Players.PlayerRemoving:Connect(function(plr)
	if plr == player then
		cleanupConnections()
		print("ClassSelectionHandler: Resources cleaned up due to player leaving")
	end
end)

-- Start system
initialize()
