-- PlayerManager.lua
-- Module for managing all player data in the game
-- Location: ServerStorage/Modules/PlayerManager.lua
-- Version: 1.0.0

local PlayerManager = {}
PlayerManager.__index = PlayerManager

-- Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

-- Get ClassData module
local ClassData = nil

-- Try to load ClassData module with error handling
local success, result = pcall(function()
	return require(ReplicatedStorage:WaitForChild("SharedModules"):WaitForChild("ClassData"))
end)

if success then
	ClassData = result
	print("[PlayerManager] Successfully loaded ClassData module")
else
	warn("[PlayerManager] Failed to load ClassData module: " .. tostring(result))
	-- Create minimal ClassData fallback
	ClassData = {
		DefaultStats = {
			MaxHP = 100,
			MaxMP = 50,
			ATK = 10,
			DEF = 0,
			MAGIC = 10
		},
		GetClassInfo = function(self, className)
			return nil
		end,
		GetBaseStats = function(self, className)
			return self.DefaultStats
		end
	}
end

-- Health sync configuration
local HEALTH_SYNC_INTERVAL = 0.5
local AUTO_HEAL_ENABLED = false
local AUTO_HEAL_INTERVAL = 10
local AUTO_HEAL_AMOUNT = 5
local MAX_AUTO_HEAL_PERCENT = 50

-- Constructor
function PlayerManager.new(gameManager)
	local self = setmetatable({}, PlayerManager)

	-- Reference to game manager
	self.gameManager = gameManager

	-- Player data storage
	self.players = {}
	self.playerCount = 0

	-- Player health sync connections
	self.healthSyncConnections = {}

	-- Initialize remote events
	self:InitializeRemotes()

	return self
end

-- Initialize remote events needed for player management
function PlayerManager:InitializeRemotes()
	print("[PlayerManager] Initializing remote events")

	local remotes = ReplicatedStorage:WaitForChild("Remotes")
	local uiRemotes = remotes:WaitForChild("UIRemotes")

	-- Create required remotes if they don't exist
	local function ensureRemoteEvent(parent, name)
		local event = parent:FindFirstChild(name)
		if not event then
			event = Instance.new("RemoteEvent")
			event.Name = name
			event.Parent = parent
			print("[PlayerManager] Created RemoteEvent: " .. name)
		end
		return event
	end

	-- UI Remotes
	self.updatePlayerStatsEvent = ensureRemoteEvent(uiRemotes, "UpdatePlayerStats")
	self.statChangedEvent = ensureRemoteEvent(uiRemotes, "StatChanged")
	self.playerDamagedEvent = ensureRemoteEvent(uiRemotes, "PlayerDamaged")
	self.playerHealedEvent = ensureRemoteEvent(uiRemotes, "PlayerHealed")

	print("[PlayerManager] Remote events initialized")
end

-- Get default stats for a given class
function PlayerManager:GetDefaultStatsForClass(className)
	-- Default stats if no class specified
	local defaultStats = {
		level = 1,
		hp = 100,
		maxHp = 100,
		mp = 50,
		maxMp = 50,
		attack = 10,
		defense = 0, -- Starting defense is 0
		magic = 10,
		money = 100
	}

	-- If no class provided, return defaults
	if not className then
		return defaultStats
	end

	-- Get stats from ClassData
	local classStats = nil
	if ClassData then
		local baseStats = ClassData:GetBaseStats(className)
		if baseStats then
			classStats = baseStats
		end
	end

	-- If no data from ClassData, use class-specific defaults
	if not classStats then
		if className == "Warrior" then
			defaultStats.maxHp = 125
			defaultStats.hp = 125
			defaultStats.attack = 95
			defaultStats.magic = 10
		elseif className == "Mage" then
			defaultStats.maxHp = 85
			defaultStats.hp = 85
			defaultStats.maxMp = 120
			defaultStats.mp = 120
			defaultStats.attack = 25
			defaultStats.magic = 95
		elseif className == "Thief" then
			defaultStats.maxHp = 100
			defaultStats.hp = 100
			defaultStats.maxMp = 60
			defaultStats.mp = 60
			defaultStats.attack = 75
			defaultStats.magic = 30
			defaultStats.money = 150
		end

		print("[PlayerManager] Using default stats for class: " .. className)
		return defaultStats
	end

	-- Map ClassData stats to our internal stats format
	local stats = {
		level = 1,
		hp = classStats.MaxHP or 100,
		maxHp = classStats.MaxHP or 100,
		mp = classStats.MaxMP or 50,
		maxMp = classStats.MaxMP or 50,
		attack = classStats.ATK or 10,
		defense = 0, -- Always 0 as per requirements
		magic = classStats.MAGIC or 10,
		money = 100 -- Default money value
	}

	-- Class-specific money adjustment
	if className == "Thief" then
		stats.money = 150 -- Thieves start with more money
	end

	print("[PlayerManager] Created stats for " .. className .. ": MaxHP=" .. stats.maxHp .. 
		", MaxMP=" .. stats.maxMp .. ", ATK=" .. stats.attack .. ", MAGIC=" .. stats.magic)

	return stats
end

-- Register a new player
function PlayerManager:RegisterPlayer(player, className)
	-- Create player data structure with stats based on class if provided
	local initialStats = self:GetDefaultStatsForClass(className)

	-- Create the player data entry
	self.players[player.UserId] = {
		player = player,
		isConnected = true,
		joinTime = os.time(),
		class = className,
		stats = initialStats,
		baseStats = table.clone(initialStats), -- Store base stats for equipment calculations
		inventory = {
			items = {},
			weapons = {},
			armor = {},
			shields = {}
		},
		position = nil,
		isAlive = true
	}

	-- Increment counter
	self.playerCount = self.playerCount + 1

	-- Set up health connection
	self:ConnectPlayerHealth(player)

	return self.players[player.UserId]
end

-- Unregister a player
function PlayerManager:UnregisterPlayer(player)
	if self.players[player.UserId] then
		-- Disconnect health sync
		self:DisconnectPlayerHealth(player)

		self.players[player.UserId] = nil
		self.playerCount = self.playerCount - 1
	end
end

-- Connect HP between stats system and Humanoid
function PlayerManager:ConnectPlayerHealth(player)
	if not player then return end

	-- Disconnect existing connection
	self:DisconnectPlayerHealth(player)

	-- Check if player has a character
	if not player.Character then
		-- Wait for character to be created
		player.CharacterAdded:Connect(function(character)
			self:SetupCharacterHealth(player, character)
		end)
		return
	end

	-- Set up health connection for current character
	self:SetupCharacterHealth(player, player.Character)
end

-- Set up health connection for character
function PlayerManager:SetupCharacterHealth(player, character)
	if not player or not character then return end

	local humanoid = character:FindFirstChild("Humanoid")
	if not humanoid then
		warn("[PlayerManager] Humanoid not found for player: " .. player.Name)
		return
	end

	-- Get player data
	local playerData = self:GetPlayerData(player)
	if not playerData then
		warn("[PlayerManager] Player data not found: " .. player.Name)
		return
	end

	-- Store current HP values
	local statsHP = playerData.stats.hp
	local statsMaxHP = playerData.stats.maxHp

	print("[PlayerManager] Setting up health for " .. player.Name .. ": HP=" .. statsHP .. "/" .. statsMaxHP)

	-- Adjust Humanoid's MaxHealth to match maxHp in stats system
	humanoid.MaxHealth = statsMaxHP

	-- Adjust Humanoid's Health to match hp in stats system
	-- IMPORTANT: Don't modify playerData.stats.hp here to avoid overriding class-assigned values
	humanoid.Health = statsHP

	-- Disable automatic regeneration
	if humanoid:FindFirstChild("HealthRegen") then
		humanoid.HealthRegen.Disabled = true
	end

	-- Connect to Humanoid damage
	local healthChangedConnection = humanoid.HealthChanged:Connect(function(newHealth)
		-- Check if it's damage
		if newHealth < humanoid.Health then
			local damage = humanoid.Health - newHealth

			-- Update HP in stats system
			local currentPlayerData = self:GetPlayerData(player)
			if currentPlayerData then
				local newStatsHP = math.max(0, currentPlayerData.stats.hp - damage)

				-- IMPORTANT: Use direct assignment to avoid calling UpdatePlayerHP
				-- which would trigger a UI update and potentially a sync loop
				currentPlayerData.stats.hp = newStatsHP

				-- Notify client about damage directly
				if self.playerDamagedEvent then
					self.playerDamagedEvent:FireClient(player, {
						oldHP = currentPlayerData.stats.hp + damage,
						newHP = newStatsHP,
						maxHP = currentPlayerData.stats.maxHp,
						damage = damage,
						source = "Humanoid"
					})
				end

				-- Send a direct stats update but don't trigger HP sync
				if self.updatePlayerStatsEvent then
					self.updatePlayerStatsEvent:FireClient(player, player.UserId, {
						hp = newStatsHP,
						maxHp = currentPlayerData.stats.maxHp
					})
				end
			end
		end
	end)

	-- Start HP sync - DISABLED TO PREVENT LOOPS
	-- We'll rely solely on explicit updates instead

	-- Store all connections for cleanup
	self.healthSyncConnections[player.UserId] = {
		healthChanged = healthChangedConnection,
		sync = nil,
		heal = nil
	}
end

-- Disconnect player health connections
function PlayerManager:DisconnectPlayerHealth(player)
	if not player then return end

	local connections = self.healthSyncConnections[player.UserId]
	if connections then
		-- Disconnect all connections
		if connections.healthChanged then
			connections.healthChanged:Disconnect()
		end

		connections.sync = nil
		connections.heal = nil

		self.healthSyncConnections[player.UserId] = nil
	end
end

-- Get total player count
function PlayerManager:GetPlayerCount()
	return self.playerCount
end

-- Get all players
function PlayerManager:GetAllPlayers()
	local result = {}
	for _, playerData in pairs(self.players) do
		table.insert(result, playerData.player)
	end
	return result
end

-- Get player data by player or userId
function PlayerManager:GetPlayerData(player)
	if typeof(player) == "Instance" and player:IsA("Player") then
		return self.players[player.UserId]
	elseif type(player) == "number" then
		return self.players[player]
	end
	return nil
end

-- Set player class and update stats
function PlayerManager:SetPlayerClass(player, className)
	local playerData = self:GetPlayerData(player)
	if not playerData then
		warn("[PlayerManager] Player data not found for: " .. tostring(player))
		return false
	end

	local oldClass = playerData.class
	playerData.class = className

	print("[PlayerManager] Setting class for " .. player.Name .. " to " .. className)

	-- Get class system for stat updates
	local classSystem = self.gameManager and self.gameManager.classSystem
	if classSystem then
		-- ClassSystem will handle stat updates
		local success = classSystem:UpdatePlayerStatsFromClass(player, self)

		if success then
			-- If we have an inventory system, reapply equipment stats
			self:ApplyEquipmentStatsToPlayer(player)
			return true
		end
	end

	-- Fallback stat updating if ClassSystem fails
	local classStats = nil
	if ClassData then
		classStats = ClassData:GetBaseStats(className)
	end

	if classStats then
		print("[PlayerManager] Loading class stats directly: MaxHP=" .. (classStats.MaxHP or "nil") ..
			", MaxMP=" .. (classStats.MaxMP or "nil") .. ", ATK=" .. (classStats.ATK or "nil") ..
			", MAGIC=" .. (classStats.MAGIC or "nil"))

		-- Update stats based on class data
		playerData.stats.maxHp = classStats.MaxHP or 100
		playerData.stats.hp = classStats.MaxHP or 100  -- Start with full health
		playerData.stats.maxMp = classStats.MaxMP or 50
		playerData.stats.mp = classStats.MaxMP or 50  -- Start with full mana
		playerData.stats.attack = classStats.ATK or 10
		playerData.stats.defense = 0  -- Always 0 as per requirements
		playerData.stats.magic = classStats.MAGIC or 10

		print("[PlayerManager] Set class stats directly: HP=" .. playerData.stats.maxHp .. 
			", MP=" .. playerData.stats.maxMp .. ", ATK=" .. playerData.stats.attack ..
			", MAGIC=" .. playerData.stats.magic)
	else
		-- If class info not found, use fallback values
		if className == "Warrior" then
			playerData.stats.maxHp = 125
			playerData.stats.hp = 125
			playerData.stats.maxMp = 50
			playerData.stats.mp = 50
			playerData.stats.attack = 95
			playerData.stats.defense = 0
			playerData.stats.magic = 10
		elseif className == "Mage" then
			playerData.stats.maxHp = 85
			playerData.stats.hp = 85
			playerData.stats.maxMp = 120
			playerData.stats.mp = 120
			playerData.stats.attack = 25
			playerData.stats.defense = 0
			playerData.stats.magic = 95
		elseif className == "Thief" then
			playerData.stats.maxHp = 100
			playerData.stats.hp = 100
			playerData.stats.maxMp = 60
			playerData.stats.mp = 60
			playerData.stats.attack = 75
			playerData.stats.defense = 0
			playerData.stats.magic = 30
			playerData.stats.money = 150
		end

		print("[PlayerManager] Set class stats from fallback: HP=" .. playerData.stats.maxHp .. 
			", MP=" .. playerData.stats.maxMp .. ", ATK=" .. playerData.stats.attack)
	end

	-- Store base stats for equipment calculations
	playerData.baseStats = {
		maxHp = playerData.stats.maxHp,
		hp = playerData.stats.hp,
		maxMp = playerData.stats.maxMp,
		mp = playerData.stats.mp,
		attack = playerData.stats.attack,
		defense = playerData.stats.defense,
		magic = playerData.stats.magic,
		money = playerData.stats.money or 100
	}

	-- Apply equipment stats if any
	self:ApplyEquipmentStatsToPlayer(player)

	-- Sync HP with Humanoid
	if player.Character and player.Character:FindFirstChild("Humanoid") then
		local humanoid = player.Character:FindFirstChild("Humanoid")
		humanoid.MaxHealth = playerData.stats.maxHp
		humanoid.Health = playerData.stats.hp
	end

	-- Send update to client
	self:SyncPlayerStats(player)
	return true
end

-- Apply equipment stats to player
function PlayerManager:ApplyEquipmentStatsToPlayer(player)
	local playerData = self:GetPlayerData(player)
	if not playerData then return false end

	-- Get inventory service from GameManager
	local inventoryService = nil
	if self.gameManager and self.gameManager.inventoryService then
		inventoryService = self.gameManager.inventoryService
	end

	if not inventoryService then return false end

	-- Get player's inventory
	local inventory = inventoryService.GetPlayerInventory(player)
	if not inventory then return false end

	-- Calculate equipment stats
	local equipmentStats = inventory:CalculateEquipmentStats()
	if not equipmentStats then return false end

	-- Make sure baseStats exists
	if not playerData.baseStats then
		playerData.baseStats = {
			maxHp = playerData.stats.maxHp,
			hp = playerData.stats.hp,
			maxMp = playerData.stats.maxMp,
			mp = playerData.stats.mp,
			attack = playerData.stats.attack,
			defense = 0, -- Always 0 as per requirements
			magic = playerData.stats.magic,
			money = playerData.stats.money or 100
		}
	end

	-- Apply equipment stats to player stats
	for statName, baseValue in pairs(playerData.baseStats) do
		if equipmentStats[statName] then
			playerData.stats[statName] = baseValue + equipmentStats[statName]
		else
			playerData.stats[statName] = baseValue
		end
	end

	-- Make sure HP and MP don't exceed maximum
	playerData.stats.hp = math.min(playerData.stats.hp, playerData.stats.maxHp)
	playerData.stats.mp = math.min(playerData.stats.mp, playerData.stats.maxMp)

	-- Update Humanoid health
	if player.Character and player.Character:FindFirstChild("Humanoid") then
		local humanoid = player.Character:FindFirstChild("Humanoid")
		humanoid.MaxHealth = playerData.stats.maxHp

		-- Don't set health here - let the health sync system handle it
	end

	-- Sync player stats
	self:SyncPlayerStats(player)

	return true
end

-- Update player stats with specific values
function PlayerManager:UpdatePlayerStats(player, statUpdates)
	local playerData = self:GetPlayerData(player)
	if not playerData then return false end

	-- Track changed stats
	local changedStats = {}

	-- Update stats
	for stat, value in pairs(statUpdates or {}) do
		if playerData.stats[stat] ~= nil then
			local oldValue = playerData.stats[stat]
			playerData.stats[stat] = value

			-- Record changed stats
			changedStats[stat] = {
				oldValue = oldValue,
				newValue = value
			}
		end
	end

	-- Keep all stats including defense

	-- Ensure HP/MP don't exceed maximums
	playerData.stats.hp = math.min(playerData.stats.hp, playerData.stats.maxHp)
	playerData.stats.mp = math.min(playerData.stats.mp, playerData.stats.maxMp)

	-- Send updated stats to client
	self:SyncPlayerStats(player)

	-- Notify about specific stat changes
	if next(changedStats) ~= nil and self.statChangedEvent then
		self.statChangedEvent:FireClient(player, changedStats)
	end

	return true
end

-- Sync player stats to client
function PlayerManager:SyncPlayerStats(player)
	local playerData = self:GetPlayerData(player)
	if not playerData then return false end

	if not self.updatePlayerStatsEvent then
		warn("[PlayerManager] UpdatePlayerStats event not found, cannot sync data")
		return false
	end

	-- Get player ID
	local playerId = typeof(player) == "Instance" and player:IsA("Player") and player.UserId or player

	-- Data to send to client
	local statsToSync = {
		hp = playerData.stats.hp,
		maxHp = playerData.stats.maxHp,
		mp = playerData.stats.mp,
		maxMp = playerData.stats.maxMp,
		attack = playerData.stats.attack,
		defense = playerData.stats.defense, -- Always 0
		magic = playerData.stats.magic,
		level = playerData.stats.level or 1,
		class = playerData.class,
		money = playerData.stats.money
	}

	-- Add logging to help debug
	print("[PlayerManager] Syncing stats: HP=" .. statsToSync.hp .. "/" .. statsToSync.maxHp .. 
		", MP=" .. statsToSync.mp .. "/" .. statsToSync.maxMp .. 
		", ATK=" .. statsToSync.attack .. ", DEF=" .. statsToSync.defense)

	-- Send stats to client
	self.updatePlayerStatsEvent:FireClient(player, playerId, statsToSync)

	return true
end

-- Update player HP
function PlayerManager:UpdatePlayerHP(player, newHP)
	local playerData = self:GetPlayerData(player)
	if not playerData then return false end

	local oldHP = playerData.stats.hp
	playerData.stats.hp = math.min(newHP, playerData.stats.maxHp)
	playerData.stats.hp = math.max(0, playerData.stats.hp) -- Prevent negative HP

	-- Log HP change
	print("[PlayerManager] Updating HP: " .. oldHP .. " -> " .. playerData.stats.hp .. "/" .. playerData.stats.maxHp)

	-- Notify client of HP change
	if self.statChangedEvent then
		self.statChangedEvent:FireClient(player, {
			hp = {
				oldValue = oldHP,
				newValue = playerData.stats.hp
			}
		})
	end

	-- Sync all stats
	self:SyncPlayerStats(player)

	-- Sync HP with Humanoid - Do not modify stats here, only update Humanoid
	if player.Character and player.Character:FindFirstChild("Humanoid") then
		local humanoid = player.Character:FindFirstChild("Humanoid")

		-- Update MaxHealth first
		if humanoid.MaxHealth ~= playerData.stats.maxHp then
			humanoid.MaxHealth = playerData.stats.maxHp
		end

		-- Then update Health, make sure we don't trigger the Health Changed event by checking first
		if math.abs(humanoid.Health - playerData.stats.hp) > 1 then
			humanoid.Health = playerData.stats.hp
			print("[PlayerManager] Updated Humanoid HP: " .. humanoid.Health .. "/" .. humanoid.MaxHealth)
		end
	else
		print("[PlayerManager] Cannot update Humanoid HP - Character or Humanoid not found")
	end

	-- Check if player died
	if playerData.stats.hp <= 0 and playerData.isAlive then
		playerData.isAlive = false
		self:HandlePlayerDeath(player)
	end

	return true
end

-- Update player MP
function PlayerManager:UpdatePlayerMP(player, newMP)
	local playerData = self:GetPlayerData(player)
	if not playerData then return false end

	local oldMP = playerData.stats.mp
	playerData.stats.mp = math.min(newMP, playerData.stats.maxMp)
	playerData.stats.mp = math.max(0, playerData.stats.mp) -- Prevent negative MP

	-- Notify client of MP change
	if self.statChangedEvent then
		self.statChangedEvent:FireClient(player, {
			mp = {
				oldValue = oldMP,
				newValue = playerData.stats.mp
			}
		})
	end

	-- Sync all stats
	self:SyncPlayerStats(player)

	return true
end

-- Handle player death
function PlayerManager:HandlePlayerDeath(player)
	local playerData = self:GetPlayerData(player)
	if not playerData then return false end

	-- Start respawn process
	spawn(function()
		wait(3)  -- Wait before respawn

		-- Reset health
		playerData.stats.hp = playerData.stats.maxHp
		playerData.stats.mp = playerData.stats.maxMp
		playerData.isAlive = true

		-- Sync to client
		self:SyncPlayerStats(player)

		-- Restore Humanoid.Health
		if player.Character and player.Character:FindFirstChild("Humanoid") then
			local humanoid = player.Character:FindFirstChild("Humanoid")
			humanoid.Health = playerData.stats.maxHp
		end
	end)

	return true
end

-- Get players sorted by join time
function PlayerManager:GetPlayersSortedByJoinTime()
	local sortedPlayers = {}

	-- Collect players
	for _, playerData in pairs(self.players) do
		table.insert(sortedPlayers, playerData)
	end

	-- Sort by join time
	table.sort(sortedPlayers, function(a, b)
		return a.joinTime < b.joinTime
	end)

	return sortedPlayers
end

-- Deal damage directly to player
function PlayerManager:DamagePlayer(player, damageAmount, source)
	local playerData = self:GetPlayerData(player)
	if not playerData then return false end

	-- Validate damage amount
	damageAmount = math.max(0, damageAmount)
	source = source or "GameMechanic"

	-- Record old HP
	local oldHP = playerData.stats.hp

	-- Calculate new HP
	local newHP = math.max(0, oldHP - damageAmount)

	-- Update HP
	self:UpdatePlayerHP(player, newHP)

	-- Notify client
	if self.playerDamagedEvent then
		self.playerDamagedEvent:FireClient(player, {
			oldHP = oldHP,
			newHP = newHP,
			maxHP = playerData.stats.maxHp,
			damage = damageAmount,
			source = source
		})
	end

	return true
end

-- Heal player directly
function PlayerManager:HealPlayer(player, healAmount, source)
	local playerData = self:GetPlayerData(player)
	if not playerData then return false end

	-- Validate heal amount
	healAmount = math.max(0, healAmount)
	source = source or "GameMechanic"

	-- Record old HP
	local oldHP = playerData.stats.hp

	-- Calculate new HP
	local newHP = math.min(oldHP + healAmount, playerData.stats.maxHp)

	-- Update HP
	self:UpdatePlayerHP(player, newHP)

	-- Notify client
	if self.playerHealedEvent then
		self.playerHealedEvent:FireClient(player, {
			oldHP = oldHP,
			newHP = newHP,
			maxHP = playerData.stats.maxHp,
			healAmount = healAmount,
			source = source
		})
	end

	return true
end

-- Configure auto-heal settings
function PlayerManager:SetAutoHealSettings(enabled, interval, amount, maxPercent)
	AUTO_HEAL_ENABLED = enabled or false

	if interval then
		AUTO_HEAL_INTERVAL = math.max(1, interval)
	end

	if amount then
		AUTO_HEAL_AMOUNT = math.max(1, amount)
	end

	if maxPercent then
		MAX_AUTO_HEAL_PERCENT = math.clamp(maxPercent, 0, 100)
	end
end

-- Reset player with correct class stats (emergency fix)
function PlayerManager:ResetPlayerStats(player)
	local playerData = self:GetPlayerData(player)
	if not playerData then return false end

	local className = playerData.class
	if not className then return false end

	print("[PlayerManager] Emergency reset of player stats for " .. player.Name)

	-- Get stats from ClassData
	local classStats = nil
	if ClassData then
		classStats = ClassData:GetBaseStats(className)
	end

	if classStats then
		-- Update basic stats
		playerData.stats.maxHp = classStats.MaxHP or 100
		playerData.stats.hp = classStats.MaxHP or 100
		playerData.stats.maxMp = classStats.MaxMP or 50
		playerData.stats.mp = classStats.MaxMP or 50
		playerData.stats.attack = classStats.ATK or 10
		playerData.stats.defense = 0 -- Always 0 as per requirements
		playerData.stats.magic = classStats.MAGIC or 10

		-- Log stats from ClassData
		print("[PlayerManager] Reset stats using ClassData: MaxHP=" .. (classStats.MaxHP or "nil") ..
			", MaxMP=" .. (classStats.MaxMP or "nil") .. ", ATK=" .. (classStats.ATK or "nil") ..
			", MAGIC=" .. (classStats.MAGIC or "nil"))
	else
		-- If no data from ClassData, use fallback values
		if className == "Warrior" then
			playerData.stats.maxHp = 125
			playerData.stats.hp = 125
			playerData.stats.maxMp = 50
			playerData.stats.mp = 50
			playerData.stats.attack = 95
			playerData.stats.defense = 0
			playerData.stats.magic = 10
		elseif className == "Mage" then
			playerData.stats.maxHp = 85
			playerData.stats.hp = 85
			playerData.stats.maxMp = 120
			playerData.stats.mp = 120
			playerData.stats.attack = 25
			playerData.stats.defense = 0
			playerData.stats.magic = 95
		elseif className == "Thief" then
			playerData.stats.maxHp = 100
			playerData.stats.hp = 100
			playerData.stats.maxMp = 60
			playerData.stats.mp = 60
			playerData.stats.attack = 75
			playerData.stats.defense = 0
			playerData.stats.magic = 30
		end

		print("[PlayerManager] Reset stats using hardcoded defaults")
	end

	-- Store base stats
	playerData.baseStats = {
		maxHp = playerData.stats.maxHp,
		hp = playerData.stats.hp,
		maxMp = playerData.stats.maxMp,
		mp = playerData.stats.mp,
		attack = playerData.stats.attack,
		defense = 0, -- Always 0 as per requirements
		magic = playerData.stats.magic,
		money = playerData.stats.money or 100
	}

	-- Apply equipment stats
	self:ApplyEquipmentStatsToPlayer(player)

	-- Update humanoid
	if player.Character and player.Character:FindFirstChild("Humanoid") then
		local humanoid = player.Character:FindFirstChild("Humanoid")
		humanoid.MaxHealth = playerData.stats.maxHp
		humanoid.Health = playerData.stats.hp
	end

	-- Sync to client
	self:SyncPlayerStats(player)

	print("[PlayerManager] Reset complete. HP=" .. playerData.stats.hp .. "/" .. playerData.stats.maxHp)

	return true
end

return PlayerManager
