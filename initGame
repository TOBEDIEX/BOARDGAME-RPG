-- Init.server.lua
-- สคริปต์เริ่มต้นเกม ทำหน้าที่เริ่มต้นระบบทั้งหมด
-- Version: 2.1.0 (Optimized)

-- Services
local ServerStorage = game:GetService("ServerStorage")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")

-- Ensure Remotes folder structure is set up
local function ensureRemotesExist()
	-- Create main Remotes folder
	local remotes = ReplicatedStorage:FindFirstChild("Remotes")
	if not remotes then
		remotes = Instance.new("Folder")
		remotes.Name = "Remotes"
		remotes.Parent = ReplicatedStorage
	end

	-- Create subfolders
	local remoteFolders = {
		"GameRemotes",
		"UIRemotes",
		"BoardRemotes",
		"CombatRemotes"
	}

	for _, folderName in ipairs(remoteFolders) do
		if not remotes:FindFirstChild(folderName) then
			local folder = Instance.new("Folder")
			folder.Name = folderName
			folder.Parent = remotes
		end
	end

	-- Create game events
	local gameRemotes = remotes:WaitForChild("GameRemotes")
	local gameEvents = {
		"StartGame",
		"EndGame",
		"AssetsLoaded",
		"UpdateTurn",
		"UpdateTurnTimer",
		"TurnAction",
		"TurnState",
		"GameStats"
	}

	for _, eventName in ipairs(gameEvents) do
		if not gameRemotes:FindFirstChild(eventName) then
			local event = Instance.new("RemoteEvent")
			event.Name = eventName
			event.Parent = gameRemotes
		end
	end

	-- Create UI events
	local uiRemotes = remotes:WaitForChild("UIRemotes")
	local uiEvents = {
		"UpdateLoading",
		"UpdatePlayersReady",
		"ShowClassSelection",
		"PlayerSelectedClass",
		"UpdateClassSelection",
		"UpdateClassSelectionTimer",
		"ClassAssigned",
		"NotifyRandomClass",
		"ShowMainGameUI",
		"UpdatePlayerStats",
		"LevelUp",
		"ClassLevelUp",
		"UpdateTurnDetails"
	}

	for _, eventName in ipairs(uiEvents) do
		if not uiRemotes:FindFirstChild(eventName) then
			local event = Instance.new("RemoteEvent")
			event.Name = eventName
			event.Parent = uiRemotes
		end
	end

	-- Create board events
	local boardRemotes = remotes:WaitForChild("BoardRemotes")
	local boardEvents = {
		"RollDice",
		"MovePlayer",
		"PlayerArrivedAtTile",
		"ShowPathSelection",
		"ChoosePath",
		"UpdatePlayerPosition",
		"TileTriggerEvent",
		"ActivityComplete"
	}

	for _, eventName in ipairs(boardEvents) do
		if not boardRemotes:FindFirstChild(eventName) then
			local event = Instance.new("RemoteEvent")
			event.Name = eventName
			event.Parent = boardRemotes
		end
	end

	return remotes
end

-- Ensure module structure exists
local function ensureModuleStructureExists()
	-- Create Modules folder
	local modulesFolder = ServerStorage:FindFirstChild("Modules")
	if not modulesFolder then
		modulesFolder = Instance.new("Folder")
		modulesFolder.Name = "Modules"
		modulesFolder.Parent = ServerStorage
	end

	-- Create Systems subfolder
	local systemsFolder = modulesFolder:FindFirstChild("Systems")
	if not systemsFolder then
		systemsFolder = Instance.new("Folder")
		systemsFolder.Name = "Systems"
		systemsFolder.Parent = modulesFolder
	end

	-- Create Optimization folder in ReplicatedStorage
	local optimizationFolder = ReplicatedStorage:FindFirstChild("Optimization")
	if not optimizationFolder then
		optimizationFolder = Instance.new("Folder")
		optimizationFolder.Name = "Optimization"
		optimizationFolder.Parent = ReplicatedStorage
	end
end

-- Initialize modules
local function initializeModules()
	-- Create remote events
	ensureRemotesExist()

	-- Ensure module structure
	ensureModuleStructureExists()

	-- Load core modules
	local Modules = ServerStorage:WaitForChild("Modules")
	local GameManager = require(Modules:WaitForChild("GameManager"))
	local PlayerManager = require(Modules:WaitForChild("PlayerManager"))
	local ClassSystem = require(Modules:WaitForChild("ClassSystem"))

	-- Create GameManager
	local gameManager = GameManager.new()

	-- Create supporting systems
	local playerManager = PlayerManager.new(gameManager)
	local classSystem = ClassSystem.new()

	-- Connect systems
	gameManager.playerManager = playerManager
	gameManager.classSystem = classSystem

	-- Create global reference
	_G.GameManager = gameManager

	-- Set up RemoteEvent handlers
	local remotes = ReplicatedStorage:WaitForChild("Remotes")
	local gameRemotes = remotes:WaitForChild("GameRemotes")
	local uiRemotes = remotes:WaitForChild("UIRemotes")

	-- Assets loaded handler
	local assetsLoadedEvent = gameRemotes:WaitForChild("AssetsLoaded")
	assetsLoadedEvent.OnServerEvent:Connect(function(player)
		gameManager:OnPlayerReady(player)
	end)

	-- Class selection handler
	local playerSelectedClassEvent = uiRemotes:WaitForChild("PlayerSelectedClass")
	playerSelectedClassEvent.OnServerEvent:Connect(function(player, selectedClass)
		gameManager:OnPlayerSelectedClass(player, selectedClass)
	end)

	return gameManager
end

-- Initialize player UI
local function initializePlayerUI(player)
	local function onCharacterAdded(character)
		-- Get PlayerGui
		local PlayerGui = player:WaitForChild("PlayerGui")

		-- Helper function to wait for or create GUI
		local function waitForGui(name, timeout)
			local startTime = os.time()
			while os.time() - startTime < timeout do
				local gui = PlayerGui:FindFirstChild(name)
				if gui then return gui end
				wait(0.1)
			end

			-- Create if not found
			local newGui = Instance.new("ScreenGui")
			newGui.Name = name
			newGui.Parent = PlayerGui
			return newGui
		end

		-- Get required GUIs
		local LoadingScreen = waitForGui("LoadingScreen", 5)
		local ClassSelection = waitForGui("ClassSelection", 5)
		local MainGameUI = waitForGui("MainGameUI", 5)
		local PopupUI = waitForGui("PopupUI", 5)
		local GameOverScreen = waitForGui("GameOverScreen", 5)

		-- Set initial state
		LoadingScreen.Enabled = true
		ClassSelection.Enabled = false
		MainGameUI.Enabled = false
		GameOverScreen.Enabled = false

		-- Configure PopupUI
		PopupUI.Enabled = true
		for _, ui in pairs(PopupUI:GetChildren()) do
			if ui:IsA("Frame") or ui:IsA("ScreenGui") then
				ui.Visible = false
			end
		end
	end

	-- Initialize for existing character
	if player.Character then
		onCharacterAdded(player.Character)
	end

	-- Connect for future spawns
	player.CharacterAdded:Connect(onCharacterAdded)
end

-- Load services
local function loadServices()
	local ServerScriptService = game:GetService("ServerScriptService")
	local Services = ServerScriptService:FindFirstChild("Services")

	if not Services then
		warn("Services folder not found")
		return
	end

	-- List services for debugging
	print("Found services:")
	for _, service in pairs(Services:GetChildren()) do
		if service:IsA("Script") then
			print(" - " .. service.Name)
		end
	end

	-- Server scripts execute automatically
	print("All services will initialize automatically")
end

-- Main initialization
local function initGame()
	-- Initialize modules
	local gameManager = initializeModules()

	-- Initialize GameManager
	gameManager:Initialize()

	-- Setup UI for current players
	for _, player in pairs(Players:GetPlayers()) do
		initializePlayerUI(player)
	end

	-- Connect for future players
	Players.PlayerAdded:Connect(function(player)
		initializePlayerUI(player)
	end)

	-- Load services
	loadServices()

	print("Game initialized successfully")
end

-- Start initialization
initGame()
