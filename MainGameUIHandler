-- MainGameUIHandler.lua
-- จัดการ UI หลักของเกม
-- Version: 2.0.0 (Optimized)

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

-- Get local player
local player = Players.LocalPlayer
if not player then
	Players:GetPropertyChangedSignal("LocalPlayer"):Wait()
	player = Players.LocalPlayer
end

-- Get UI elements
local PlayerGui = player:WaitForChild("PlayerGui")
local MainGameUI = PlayerGui:WaitForChild("MainGameUI")
local StatusBarContainer = MainGameUI:WaitForChild("StatusBarContainer")

-- Helper functions
local function createUIElement(class, properties)
	local element = Instance.new(class)
	for prop, value in pairs(properties) do
		element[prop] = value
	end
	return element
end

local function setupUIComponent(elementType, properties, parent)
	local element = createUIElement(elementType, properties)
	element.Parent = parent
	return element
end

-- Load TurnIndicator module
local TurnIndicator = nil
if script.Parent and script.Parent:FindFirstChild("UI") and script.Parent.UI:FindFirstChild("TurnIndicator") then
	TurnIndicator = require(script.Parent.UI.TurnIndicator)
end

-- Create buttons if they don't exist
local function ensureButtonsExist()
	local InventoryButton = MainGameUI:FindFirstChild("InventoryButton")
	local QuestButton = MainGameUI:FindFirstChild("QuestButton")

	if not InventoryButton then
		InventoryButton = setupUIComponent("TextButton", {
			Name = "InventoryButton",
			Size = UDim2.new(0.1, 0, 0.05, 0),
			Position = UDim2.new(0.05, 0, 0.15, 0),
			BackgroundColor3 = Color3.fromRGB(50, 50, 50),
			Text = "Inventory",
			TextColor3 = Color3.fromRGB(255, 255, 255),
			Font = Enum.Font.GothamBold,
			TextSize = 14
		}, MainGameUI)

		setupUIComponent("UICorner", {CornerRadius = UDim.new(0, 6)}, InventoryButton)
	end

	if not QuestButton then
		QuestButton = setupUIComponent("TextButton", {
			Name = "QuestButton",
			Size = UDim2.new(0.1, 0, 0.05, 0),
			Position = UDim2.new(0.16, 0, 0.15, 0),
			BackgroundColor3 = Color3.fromRGB(50, 50, 50),
			Text = "Quests",
			TextColor3 = Color3.fromRGB(255, 255, 255),
			Font = Enum.Font.GothamBold,
			TextSize = 14
		}, MainGameUI)

		setupUIComponent("UICorner", {CornerRadius = UDim.new(0, 6)}, QuestButton)
	end

	return InventoryButton, QuestButton
end

-- Create or get Current Turn Indicator
local function ensureTurnIndicatorExists()
	local CurrentTurnIndicator = MainGameUI:FindFirstChild("CurrentTurnIndicator")

	if not CurrentTurnIndicator then
		if TurnIndicator then
			CurrentTurnIndicator = TurnIndicator(MainGameUI)
		else
			CurrentTurnIndicator = setupUIComponent("Frame", {
				Name = "CurrentTurnIndicator",
				Size = UDim2.new(0.25, 0, 0.08, 0),
				Position = UDim2.new(0.375, 0, 0.05, 0),
				BackgroundColor3 = Color3.fromRGB(50, 80, 120),
				BackgroundTransparency = 0.2
			}, MainGameUI)

			setupUIComponent("UICorner", {CornerRadius = UDim.new(0, 8)}, CurrentTurnIndicator)

			setupUIComponent("TextLabel", {
				Name = "TurnText",
				Size = UDim2.new(1, 0, 1, 0),
				BackgroundTransparency = 1,
				Text = "Waiting for turn...",
				TextColor3 = Color3.fromRGB(255, 255, 255),
				Font = Enum.Font.GothamBold,
				TextSize = 18
			}, CurrentTurnIndicator)
		end
	end

	return CurrentTurnIndicator
end

-- Initialize UI elements
local InventoryButton, QuestButton = ensureButtonsExist()
local CurrentTurnIndicator = ensureTurnIndicatorExists()

-- Get or create popup UI elements
local PopupUI = PlayerGui:WaitForChild("PopupUI")
local InventoryUI = PopupUI:FindFirstChild("InventoryUI")
local QuestUI = PopupUI:FindFirstChild("QuestUI")

-- Create popup UIs if they don't exist
if not InventoryUI then
	InventoryUI = setupUIComponent("Frame", {
		Name = "InventoryUI",
		Size = UDim2.new(0.8, 0, 0.8, 0),
		Position = UDim2.new(0.1, 0, 0.1, 0),
		BackgroundColor3 = Color3.fromRGB(40, 40, 60),
		BackgroundTransparency = 0.1,
		Visible = false
	}, PopupUI)

	setupUIComponent("UICorner", {CornerRadius = UDim.new(0, 8)}, InventoryUI)

	setupUIComponent("TextLabel", {
		Name = "Title",
		Size = UDim2.new(1, 0, 0.1, 0),
		BackgroundTransparency = 1,
		Text = "Inventory",
		TextColor3 = Color3.fromRGB(255, 255, 255),
		Font = Enum.Font.GothamBold,
		TextSize = 24
	}, InventoryUI)
end

if not QuestUI then
	QuestUI = setupUIComponent("Frame", {
		Name = "QuestUI",
		Size = UDim2.new(0.8, 0, 0.8, 0),
		Position = UDim2.new(0.1, 0, 0.1, 0),
		BackgroundColor3 = Color3.fromRGB(40, 40, 60),
		BackgroundTransparency = 0.1,
		Visible = false
	}, PopupUI)

	setupUIComponent("UICorner", {CornerRadius = UDim.new(0, 8)}, QuestUI)

	setupUIComponent("TextLabel", {
		Name = "Title",
		Size = UDim2.new(1, 0, 0.1, 0),
		BackgroundTransparency = 1,
		Text = "Quests",
		TextColor3 = Color3.fromRGB(255, 255, 255),
		Font = Enum.Font.GothamBold,
		TextSize = 24
	}, QuestUI)
end

-- Get remotes
local remotes = ReplicatedStorage:WaitForChild("Remotes")
local uiRemotes = remotes:WaitForChild("UIRemotes")
local gameRemotes = remotes:WaitForChild("GameRemotes")

-- Get required remotes
local updatePlayerStatsEvent = uiRemotes:WaitForChild("UpdatePlayerStats")
local updateTurnEvent = gameRemotes:WaitForChild("UpdateTurn")
local endGameEvent = gameRemotes:WaitForChild("EndGame")

-- Create any missing required remotes
local updateTurnTimerEvent = gameRemotes:FindFirstChild("UpdateTurnTimer")

local updateTurnDetailsEvent = uiRemotes:FindFirstChild("UpdateTurnDetails")

-- Turn state variables
local turnTimerActive = false
local turnTimerConnection = nil
local turnDetailsData = nil
local isMyTurn = false
local myStatusBar = nil

-- Setup player status bar
local function setupPlayerStatusBar()
	-- Get or create template
	local template = StatusBarContainer:FindFirstChild("PlayerStatusBar")
	if not template then
		template = setupUIComponent("Frame", {
			Name = "PlayerStatusBar",
			Size = UDim2.new(1, 0, 0.1, 0),
			BackgroundColor3 = Color3.fromRGB(40, 40, 60),
			Visible = false
		}, StatusBarContainer)

		-- Create UI Elements with helper function
		setupUIComponent("TextLabel", {
			Name = "PlayerName",
			Size = UDim2.new(0.3, 0, 0.3, 0),
			Position = UDim2.new(0.05, 0, 0.1, 0),
			BackgroundTransparency = 1,
			TextColor3 = Color3.fromRGB(255, 255, 255),
			TextXAlignment = Enum.TextXAlignment.Left,
			Font = Enum.Font.GothamBold,
			TextSize = 14
		}, template)

		setupUIComponent("TextLabel", {
			Name = "PlayerClass",
			Size = UDim2.new(0.3, 0, 0.2, 0),
			Position = UDim2.new(0.05, 0, 0.4, 0),
			BackgroundTransparency = 1,
			TextColor3 = Color3.fromRGB(200, 200, 255),
			TextXAlignment = Enum.TextXAlignment.Left,
			Font = Enum.Font.Gotham,
			TextSize = 12
		}, template)

		setupUIComponent("TextLabel", {
			Name = "PlayerLevel",
			Size = UDim2.new(0.15, 0, 0.2, 0),
			Position = UDim2.new(0.35, 0, 0.4, 0),
			BackgroundTransparency = 1,
			TextColor3 = Color3.fromRGB(200, 255, 200),
			TextXAlignment = Enum.TextXAlignment.Left,
			Font = Enum.Font.Gotham,
			TextSize = 12
		}, template)

		-- Create HP bar
		local hpBar = setupUIComponent("Frame", {
			Name = "HPBar",
			Size = UDim2.new(0.6, 0, 0.15, 0),
			Position = UDim2.new(0.05, 0, 0.65, 0),
			BackgroundColor3 = Color3.fromRGB(40, 40, 40)
		}, template)

		setupUIComponent("Frame", {
			Name = "HPFill",
			Size = UDim2.new(1, 0, 1, 0),
			BackgroundColor3 = Color3.fromRGB(255, 50, 50)
		}, hpBar)

		setupUIComponent("TextLabel", {
			Name = "HPText",
			Size = UDim2.new(1, 0, 1, 0),
			BackgroundTransparency = 1,
			TextColor3 = Color3.fromRGB(255, 255, 255),
			Font = Enum.Font.GothamBold,
			TextSize = 10
		}, hpBar)

		-- Create MP bar
		local mpBar = setupUIComponent("Frame", {
			Name = "MPBar",
			Size = UDim2.new(0.6, 0, 0.15, 0),
			Position = UDim2.new(0.05, 0, 0.82, 0),
			BackgroundColor3 = Color3.fromRGB(40, 40, 40)
		}, template)

		setupUIComponent("Frame", {
			Name = "MPFill",
			Size = UDim2.new(1, 0, 1, 0),
			BackgroundColor3 = Color3.fromRGB(50, 50, 255)
		}, mpBar)

		setupUIComponent("TextLabel", {
			Name = "MPText",
			Size = UDim2.new(1, 0, 1, 0),
			BackgroundTransparency = 1,
			TextColor3 = Color3.fromRGB(255, 255, 255),
			Font = Enum.Font.GothamBold,
			TextSize = 10
		}, mpBar)

		-- Create money container
		local moneyContainer = setupUIComponent("Frame", {
			Name = "MoneyContainer",
			Size = UDim2.new(0.2, 0, 0.2, 0),
			Position = UDim2.new(0.75, 0, 0.7, 0),
			BackgroundTransparency = 1
		}, template)

		setupUIComponent("TextLabel", {
			Name = "CoinIcon",
			Size = UDim2.new(0.3, 0, 1, 0),
			BackgroundTransparency = 1,
			Text = "$",
			TextColor3 = Color3.fromRGB(255, 215, 0),
			Font = Enum.Font.GothamBold,
			TextSize = 14
		}, moneyContainer)

		setupUIComponent("TextLabel", {
			Name = "MoneyAmount",
			Size = UDim2.new(0.7, 0, 1, 0),
			Position = UDim2.new(0.3, 0, 0, 0),
			BackgroundTransparency = 1,
			Text = "100",
			TextColor3 = Color3.fromRGB(255, 255, 255),
			Font = Enum.Font.Gotham,
			TextSize = 12
		}, moneyContainer)
	end

	-- Create status bar for local player
	local myStatusBar = template:Clone()
	myStatusBar.Name = "MyPlayerStatusBar"
	myStatusBar.Visible = true
	myStatusBar.Parent = StatusBarContainer

	-- Set initial values
	if myStatusBar:FindFirstChild("PlayerName") then
		myStatusBar.PlayerName.Text = player.Name
	end

	if myStatusBar:FindFirstChild("PlayerClass") then
		myStatusBar.PlayerClass.Text = "Unknown"
	end

	if myStatusBar:FindFirstChild("PlayerLevel") then
		myStatusBar.PlayerLevel.Text = "Lv.1"
	end

	-- Initialize HP and MP bars
	if myStatusBar:FindFirstChild("HPBar") and myStatusBar.HPBar:FindFirstChild("HPFill") then
		myStatusBar.HPBar.HPFill.Size = UDim2.new(1, 0, 1, 0)
		if myStatusBar.HPBar:FindFirstChild("HPText") then
			myStatusBar.HPBar.HPText.Text = "100/100"
		end
	end

	if myStatusBar:FindFirstChild("MPBar") and myStatusBar.MPBar:FindFirstChild("MPFill") then
		myStatusBar.MPBar.MPFill.Size = UDim2.new(1, 0, 1, 0)
		if myStatusBar.MPBar:FindFirstChild("MPText") then
			myStatusBar.MPBar.MPText.Text = "50/50"
		end
	end

	-- Initialize money
	if myStatusBar:FindFirstChild("MoneyContainer") and myStatusBar.MoneyContainer:FindFirstChild("MoneyAmount") then
		myStatusBar.MoneyContainer.MoneyAmount.Text = "100"
	end

	-- Highlight player status bar
	myStatusBar.BackgroundColor3 = Color3.fromRGB(60, 80, 100)

	setupUIComponent("UIStroke", {
		Color = Color3.fromRGB(100, 150, 200),
		Thickness = 2
	}, myStatusBar)

	-- Remove other status bars
	for _, child in pairs(StatusBarContainer:GetChildren()) do
		if child.Name ~= "MyPlayerStatusBar" and child.Name ~= "PlayerStatusBar" and child:IsA("Frame") then
			child:Destroy()
		end
	end

	-- Hide template
	template.Visible = false

	return myStatusBar
end

-- Update player status bar with stats
local function updateMyStatusBar(stats)
	if not myStatusBar then
		myStatusBar = setupPlayerStatusBar()
		if not myStatusBar then return end
	end

	-- Update level if provided
	if stats.level and myStatusBar:FindFirstChild("PlayerLevel") then
		myStatusBar.PlayerLevel.Text = "Lv." .. stats.level
	end

	-- Update class if provided
	if stats.class and myStatusBar:FindFirstChild("PlayerClass") then
		myStatusBar.PlayerClass.Text = stats.class
	end

	-- Update HP if provided
	if stats.hp and stats.maxHp and 
		myStatusBar:FindFirstChild("HPBar") and 
		myStatusBar.HPBar:FindFirstChild("HPFill") then

		local hpRatio = stats.hp / stats.maxHp
		local hpTween = TweenService:Create(
			myStatusBar.HPBar.HPFill,
			TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
			{Size = UDim2.new(hpRatio, 0, 1, 0)}
		)
		hpTween:Play()

		if myStatusBar.HPBar:FindFirstChild("HPText") then
			myStatusBar.HPBar.HPText.Text = math.floor(stats.hp) .. "/" .. math.floor(stats.maxHp)
		end

		-- Change color based on HP ratio
		if hpRatio < 0.3 then
			myStatusBar.HPBar.HPFill.BackgroundColor3 = Color3.fromRGB(255, 50, 50)
		elseif hpRatio < 0.6 then
			myStatusBar.HPBar.HPFill.BackgroundColor3 = Color3.fromRGB(255, 200, 50)
		else
			myStatusBar.HPBar.HPFill.BackgroundColor3 = Color3.fromRGB(50, 200, 50)
		end
	end

	-- Update MP if provided
	if stats.mp and stats.maxMp and 
		myStatusBar:FindFirstChild("MPBar") and 
		myStatusBar.MPBar:FindFirstChild("MPFill") then

		local mpRatio = stats.mp / stats.maxMp
		local mpTween = TweenService:Create(
			myStatusBar.MPBar.MPFill,
			TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
			{Size = UDim2.new(mpRatio, 0, 1, 0)}
		)
		mpTween:Play()

		if myStatusBar.MPBar:FindFirstChild("MPText") then
			myStatusBar.MPBar.MPText.Text = math.floor(stats.mp) .. "/" .. math.floor(stats.maxMp)
		end
	end

	-- Update money if provided
	if stats.money and 
		myStatusBar:FindFirstChild("MoneyContainer") and 
		myStatusBar.MoneyContainer:FindFirstChild("MoneyAmount") then

		myStatusBar.MoneyContainer.MoneyAmount.Text = stats.money
	end
end

-- Update turn indicator function
local function updateTurnIndicator(turnDetails)
	if not CurrentTurnIndicator then
		CurrentTurnIndicator = ensureTurnIndicatorExists()
	end

	local currentPlayerName = turnDetails.playerName or "Unknown"
	local turnNumber = turnDetails.turnNumber or 1
	local playerClass = turnDetails.playerClass or "Unknown"
	local playerLevel = turnDetails.playerLevel or 1
	local currentPlayerId = turnDetails.playerId

	-- Update turn text
	if CurrentTurnIndicator:FindFirstChild("TurnText") then
		CurrentTurnIndicator.TurnText.Text = currentPlayerName .. "'s Turn (Turn " .. turnNumber .. ")"
	end

	-- Update class and level info
	if CurrentTurnIndicator:FindFirstChild("PlayerClassLabel") then
		CurrentTurnIndicator.PlayerClassLabel.Text = "Class: " .. playerClass
	end

	if CurrentTurnIndicator:FindFirstChild("PlayerLevelLabel") then
		CurrentTurnIndicator.PlayerLevelLabel.Text = "Lv." .. playerLevel
	end

	-- Setup timer if available
	if CurrentTurnIndicator:FindFirstChild("TurnTimerFrame") then
		if turnTimerConnection then
			turnTimerConnection:Disconnect()
			turnTimerConnection = nil
		end
		CurrentTurnIndicator.TurnTimerFrame.Visible = true
	end

	-- Set turn status
	isMyTurn = (currentPlayerId == player.UserId)

	-- Highlight UI if it's player's turn
	if isMyTurn then
		-- Highlight status bar
		if myStatusBar then
			myStatusBar.BackgroundColor3 = Color3.fromRGB(70, 120, 200)

			if myStatusBar:FindFirstChild("UIStroke") then
				myStatusBar.UIStroke.Color = Color3.fromRGB(120, 200, 255)
				myStatusBar.UIStroke.Thickness = 3
			end
		end

		-- Animate turn indicator
		local originalPosition = CurrentTurnIndicator.Position
		local originalSize = CurrentTurnIndicator.Size

		local expandTween = TweenService:Create(
			CurrentTurnIndicator,
			TweenInfo.new(0.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out),
			{
				Size = UDim2.new(originalSize.X.Scale + 0.02, 0, originalSize.Y.Scale + 0.02, 0),
				Position = UDim2.new(originalPosition.X.Scale - 0.01, 0, originalPosition.Y.Scale - 0.01, 0),
				BackgroundColor3 = Color3.fromRGB(60, 140, 200)
			}
		)

		local contractTween = TweenService:Create(
			CurrentTurnIndicator,
			TweenInfo.new(0.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out),
			{
				Size = originalSize,
				Position = originalPosition,
				BackgroundColor3 = Color3.fromRGB(50, 100, 150)
			}
		)

		expandTween:Play()
		expandTween.Completed:Connect(function()
			contractTween:Play()
		end)

		-- Show "Your Turn" notification
		local notification = setupUIComponent("Frame", {
			Name = "YourTurnNotification",
			Size = UDim2.new(0.3, 0, 0.1, 0),
			Position = UDim2.new(0.35, 0, 1.1, 0),
			BackgroundColor3 = Color3.fromRGB(50, 120, 200),
			BackgroundTransparency = 0.2,
			BorderSizePixel = 0,
			ZIndex = 10
		}, MainGameUI)

		setupUIComponent("UICorner", {
			CornerRadius = UDim.new(0, 8)
		}, notification)

		setupUIComponent("UIStroke", {
			Color = Color3.fromRGB(120, 200, 255),
			Thickness = 2
		}, notification)

		setupUIComponent("TextLabel", {
			Size = UDim2.new(1, 0, 1, 0),
			BackgroundTransparency = 1,
			Text = "It's your turn!",
			TextColor3 = Color3.fromRGB(255, 255, 255),
			TextSize = 24,
			Font = Enum.Font.GothamBold,
			ZIndex = 11
		}, notification)

		-- Animate notification
		local notifTween = TweenService:Create(
			notification,
			TweenInfo.new(0.7, Enum.EasingStyle.Back, Enum.EasingDirection.Out),
			{Position = UDim2.new(0.35, 0, 0.7, 0)}
		)
		notifTween:Play()

		-- Hide notification after delay
		delay(2, function()
			local hideTween = TweenService:Create(
				notification,
				TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.In),
				{Position = UDim2.new(0.35, 0, 1.1, 0), BackgroundTransparency = 1}
			)
			hideTween:Play()
			hideTween.Completed:Connect(function()
				notification:Destroy()
			end)
		end)
	else
		-- Reset highlights if not player's turn
		if myStatusBar then
			myStatusBar.BackgroundColor3 = Color3.fromRGB(60, 80, 100)

			if myStatusBar:FindFirstChild("UIStroke") then
				myStatusBar.UIStroke.Color = Color3.fromRGB(100, 150, 200)
				myStatusBar.UIStroke.Thickness = 2
			end
		end

		CurrentTurnIndicator.BackgroundColor3 = Color3.fromRGB(80, 80, 100)
	end

	-- Store latest turn data
	turnDetailsData = turnDetails
end

-- Update turn timer function
local function updateTurnTimer(timeRemaining)
	if not CurrentTurnIndicator or 
		not CurrentTurnIndicator:FindFirstChild("TurnTimerFrame") or
		not CurrentTurnIndicator.TurnTimerFrame:FindFirstChild("TimerFill") or
		not CurrentTurnIndicator.TurnTimerFrame:FindFirstChild("TimerText") then
		return
	end

	local timerFrame = CurrentTurnIndicator.TurnTimerFrame
	local timerFill = timerFrame.TimerFill
	local timerText = timerFrame.TimerText

	-- Update timer text
	timerText.Text = tostring(timeRemaining) .. "s"

	-- Calculate fill ratio (assuming max time is 120 seconds)
	local maxTime = 120
	local fillRatio = timeRemaining / maxTime

	-- Animate fill bar
	local fillTween = TweenService:Create(
		timerFill,
		TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
		{Size = UDim2.new(fillRatio, 0, 1, 0)}
	)
	fillTween:Play()

	-- Change color based on time remaining
	if timeRemaining <= 10 then
		timerFill.BackgroundColor3 = Color3.fromRGB(255, 50, 50)

		if timeRemaining <= 5 then
			local flashTween = TweenService:Create(
				timerFrame,
				TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out, 0, true),
				{BackgroundColor3 = Color3.fromRGB(200, 50, 50)}
			)
			flashTween:Play()
		end
	elseif timeRemaining <= 30 then
		timerFill.BackgroundColor3 = Color3.fromRGB(255, 150, 50)
	else
		timerFill.BackgroundColor3 = Color3.fromRGB(50, 200, 50)
	end
end

-- Create End Turn button
local function setupEndTurnButton()
	local endTurnButton = MainGameUI:FindFirstChild("EndTurnButton")

	if not endTurnButton then
		endTurnButton = setupUIComponent("TextButton", {
			Name = "EndTurnButton",
			Size = UDim2.new(0.12, 0, 0.05, 0),
			Position = UDim2.new(0.84, 0, 0.05, 0),
			BackgroundColor3 = Color3.fromRGB(80, 80, 100),
			Text = "End Turn",
			TextColor3 = Color3.fromRGB(255, 255, 255),
			Font = Enum.Font.GothamBold,
			TextSize = 14,
			AutoButtonColor = true,
			Visible = false
		}, MainGameUI)

		setupUIComponent("UICorner", {
			CornerRadius = UDim.new(0, 6)
		}, endTurnButton)

		setupUIComponent("UIStroke", {
			Color = Color3.fromRGB(150, 150, 200),
			Thickness = 1.5
		}, endTurnButton)
	end

	-- Connect button click
	endTurnButton.InputBegan:Connect(function(input)
		if (input.UserInputType == Enum.UserInputType.MouseButton1 or 
			input.UserInputType == Enum.UserInputType.Touch) and isMyTurn then

			-- Send end turn command to server
			local turnActionEvent = gameRemotes:WaitForChild("TurnAction")
			turnActionEvent:FireServer("endTurn")

			-- Hide button
			endTurnButton.Visible = false
		end
	end)

	-- Update button visibility based on turn
	RunService.Heartbeat:Connect(function()
		endTurnButton.Visible = isMyTurn

		if isMyTurn then
			endTurnButton.BackgroundColor3 = Color3.fromRGB(60, 120, 180)
			endTurnButton.UIStroke.Color = Color3.fromRGB(120, 200, 255)
		end
	end)

	return endTurnButton
end

-- Setup button handlers
local function setupButtonHandlers()
	if InventoryButton then
		InventoryButton.InputBegan:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 or
				input.UserInputType == Enum.UserInputType.Touch then
				if InventoryUI then
					-- Toggle inventory UI
					InventoryUI.Visible = not InventoryUI.Visible

					-- Hide other popups
					if InventoryUI.Visible and QuestUI then
						QuestUI.Visible = false
					end

					-- Visual feedback
					InventoryButton.BackgroundColor3 = InventoryUI.Visible and 
						Color3.fromRGB(80, 120, 80) or Color3.fromRGB(50, 50, 50)
				end
			end
		end)
	end

	if QuestButton then
		QuestButton.InputBegan:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 or
				input.UserInputType == Enum.UserInputType.Touch then
				if QuestUI then
					-- Toggle quest UI
					QuestUI.Visible = not QuestUI.Visible

					-- Hide other popups
					if QuestUI.Visible and InventoryUI then
						InventoryUI.Visible = false
					end

					-- Visual feedback
					QuestButton.BackgroundColor3 = QuestUI.Visible and 
						Color3.fromRGB(80, 120, 80) or Color3.fromRGB(50, 50, 50)
				end
			end
		end)
	end
end

-- Connect remote events
updatePlayerStatsEvent.OnClientEvent:Connect(function(playerId, stats)
	-- Only update for local player
	if playerId == player.UserId then
		updateMyStatusBar(stats)
	end
end)

updateTurnEvent.OnClientEvent:Connect(function(currentPlayerId)
	-- Create minimal turn data if details haven't arrived yet
	local turnDetails = {
		playerId = currentPlayerId,
		playerName = "Unknown",
		turnNumber = 1,
		playerClass = "Unknown",
		playerLevel = 1
	}

	-- Find player name
	for _, plr in pairs(Players:GetPlayers()) do
		if plr.UserId == currentPlayerId then
			turnDetails.playerName = plr.Name
			break
		end
	end

	updateTurnIndicator(turnDetails)
end)

updateTurnDetailsEvent.OnClientEvent:Connect(function(turnDetails)
	updateTurnIndicator(turnDetails)
end)

updateTurnTimerEvent.OnClientEvent:Connect(function(timeRemaining)
	updateTurnTimer(timeRemaining)
end)

endGameEvent.OnClientEvent:Connect(function(reason)
	-- Show game over UI
	local GameOverScreen = PlayerGui:WaitForChild("GameOverScreen")
	GameOverScreen.Enabled = true

	-- Hide main game UI
	MainGameUI.Enabled = false
	PopupUI.Enabled = false

	-- Display reason
	local Background = GameOverScreen:FindFirstChild("Background")
	if Background then
		local WinnerAnnouncement = Background:FindFirstChild("WinnerAnnouncement")
		if WinnerAnnouncement then
			WinnerAnnouncement.Text = reason
		end
	end
end)

-- Initialize UI
MainGameUI.Enabled = false -- Will be enabled by ClassSelectionHandler or server
if PopupUI then
	PopupUI.Enabled = true -- Container is visible, but individual UIs are hidden
end
if InventoryUI then
	InventoryUI.Visible = false
end
if QuestUI then
	QuestUI.Visible = false
end

-- Setup initial UI
myStatusBar = setupPlayerStatusBar()
setupButtonHandlers()
setupEndTurnButton()
