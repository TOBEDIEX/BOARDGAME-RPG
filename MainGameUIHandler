-- FixedMainGameUIHandler.lua
-- แก้ไขสำหรับแสดงผลค่าสถานะระหว่างเล่นเกมอย่างถูกต้อง และซ่อน Main UI เมื่อเปิด Inventory
-- Version: 3.2.0 (Inventory Hides Main UI)

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")

-- Get local player
local player = Players.LocalPlayer
if not player then
	Players:GetPropertyChangedSignal("LocalPlayer"):Wait()
	player = Players.LocalPlayer
end

-- โหลดข้อมูลคลาสจาก SharedModules
local ClassData = require(ReplicatedStorage:WaitForChild("SharedModules"):WaitForChild("ClassData"))

-- Get UI elements
local PlayerGui = player:WaitForChild("PlayerGui")
local MainGameUI = PlayerGui:WaitForChild("MainGameUI")
local StatusBarContainer = MainGameUI:WaitForChild("StatusBarContainer")

-- สีตามคลาส
local CLASS_COLORS = {
	Warrior = Color3.fromRGB(220, 60, 60),      -- สีแดง
	Knight = Color3.fromRGB(180, 60, 60),      -- สีแดงเข้ม
	Paladin = Color3.fromRGB(220, 100, 100),    -- สีแดงสว่าง

	Mage = Color3.fromRGB(70, 100, 200),       -- สีน้ำเงิน
	Wizard = Color3.fromRGB(50, 80, 180),       -- สีน้ำเงินเข้ม
	Archmage = Color3.fromRGB(90, 120, 220),    -- สีน้ำเงินสว่าง

	Thief = Color3.fromRGB(80, 180, 80),       -- สีเขียว
	Assassin = Color3.fromRGB(60, 160, 60),     -- สีเขียวเข้ม
	Shadow = Color3.fromRGB(100, 200, 100),     -- สีเขียวสว่าง

	Default = Color3.fromRGB(150, 150, 150)     -- สีกลาง
}

-- Variables
local myStatusBar = nil
local InventoryButton = MainGameUI:FindFirstChild("InventoryButton")
local QuestButton = MainGameUI:FindFirstChild("QuestButton")
local EndTurnButton = MainGameUI:FindFirstChild("EndTurnButton")
local CurrentTurnIndicator = MainGameUI:FindFirstChild("CurrentTurnIndicator")
local PopupUI = PlayerGui:WaitForChild("PopupUI")
local InventoryUI = PopupUI:FindFirstChild("InventoryUI")
local QuestUI = PopupUI:FindFirstChild("QuestUI")

-- Get remotes
local remotes = ReplicatedStorage:WaitForChild("Remotes")
local uiRemotes = remotes:WaitForChild("UIRemotes")
local gameRemotes = remotes:WaitForChild("GameRemotes")

-- Get required remotes
local updatePlayerStatsEvent = uiRemotes:WaitForChild("UpdatePlayerStats")
local updateTurnEvent = gameRemotes:WaitForChild("UpdateTurn")
local endGameEvent = gameRemotes:WaitForChild("EndGame")
local updateTurnDetailsEvent = uiRemotes:FindFirstChild("UpdateTurnDetails")
local updateTurnTimerEvent = gameRemotes:FindFirstChild("UpdateTurnTimer")
local statChangedEvent = uiRemotes:FindFirstChild("StatChanged")
local updateExpEvent = uiRemotes:FindFirstChild("UpdateExperience")
local levelUpEvent = uiRemotes:WaitForChild("LevelUp")
local classLevelUpEvent = uiRemotes:WaitForChild("ClassLevelUp")

-- ข้อมูลสถานะเทิร์น
local turnTimerActive = false
local turnTimerConnection = nil
local turnDetailsData = nil
local isMyTurn = false

-- ข้อมูลคลาสและเลเวลของผู้เล่น
local playerClassInfo = {
	class = nil,
	level = 1,
	classLevel = 1,
	exp = 0,
	classExp = 0,
	nextLevelExp = 100,
	nextClassLevelExp = 150
}

-- ข้อมูลสถานะปัจจุบันของผู้เล่น
local currentPlayerStats = {
	hp = 100,
	maxHp = 100,
	mp = 50,
	maxMp = 50,
	attack = 10,
	defense = 10,
	magic = 10,
	magicDefense = 10,
	agility = 10,
	money = 100
}

-- Helper function for tweening
local function createTween(object, properties, duration, style, direction)
	local tweenInfo = TweenInfo.new(
		duration or 0.3,
		style or Enum.EasingStyle.Quad,
		direction or Enum.EasingDirection.Out
	)
	local tween = TweenService:Create(object, tweenInfo, properties)
	return tween
end

-- Setup player status bar
local function setupPlayerStatusBar()
	-- Get template
	local template = StatusBarContainer:FindFirstChild("PlayerStatusBar")
	if not template then return nil end

	-- Check if my status bar already exists
	local existingStatusBar = StatusBarContainer:FindFirstChild("MyPlayerStatusBar")
	if existingStatusBar then return existingStatusBar end

	-- Create status bar for local player
	local myStatusBar = template:Clone()
	myStatusBar.Name = "MyPlayerStatusBar"
	myStatusBar.Visible = true
	myStatusBar.Parent = StatusBarContainer

	-- Set initial values
	if myStatusBar:FindFirstChild("PlayerName") then
		myStatusBar.PlayerName.Text = player.Name
	end
	if myStatusBar:FindFirstChild("PlayerClass") then
		myStatusBar.PlayerClass.Text = "Unknown"
	end
	if myStatusBar:FindFirstChild("PlayerLevel") then
		myStatusBar.PlayerLevel.Text = "Lv.1"
	end

	-- Initialize HP and MP bars
	if myStatusBar:FindFirstChild("HPBar") and myStatusBar.HPBar:FindFirstChild("HPFill") then
		myStatusBar.HPBar.HPFill.Size = UDim2.new(1, 0, 1, 0)
		if myStatusBar.HPBar:FindFirstChild("HPText") then
			myStatusBar.HPBar.HPText.Text = "100/100"
		end
	end
	if myStatusBar:FindFirstChild("MPBar") and myStatusBar.MPBar:FindFirstChild("MPFill") then
		myStatusBar.MPBar.MPFill.Size = UDim2.new(1, 0, 1, 0)
		if myStatusBar.MPBar:FindFirstChild("MPText") then
			myStatusBar.MPBar.MPText.Text = "50/50"
		end
	end

	-- Initialize money
	if myStatusBar:FindFirstChild("MoneyContainer") and myStatusBar.MoneyContainer:FindFirstChild("MoneyAmount") then
		myStatusBar.MoneyContainer.MoneyAmount.Text = "100"
	end

	-- Initialize ExpBar if it exists
	if myStatusBar:FindFirstChild("ExpBar") and myStatusBar.ExpBar:FindFirstChild("ExpFill") then
		myStatusBar.ExpBar.ExpFill.Size = UDim2.new(0, 0, 1, 0)
		if myStatusBar.ExpBar:FindFirstChild("ExpText") then
			myStatusBar.ExpBar.ExpText.Text = "EXP: 0/100"
		end
	end

	-- Highlight player status bar
	myStatusBar.BackgroundColor3 = Color3.fromRGB(60, 80, 100)

	-- Add stroke if missing
	if not myStatusBar:FindFirstChild("UIStroke") then
		local stroke = Instance.new("UIStroke")
		stroke.Color = Color3.fromRGB(100, 150, 200)
		stroke.Thickness = 2
		stroke.Parent = myStatusBar
	end

	-- Hide template
	template.Visible = false

	return myStatusBar
end

-- Update player status bar with stats
local function updateMyStatusBar(stats)
	if not myStatusBar then
		myStatusBar = setupPlayerStatusBar()
		if not myStatusBar then return end
	end

	-- เก็บค่าสถานะปัจจุบันไว้
	for key, value in pairs(stats) do
		if currentPlayerStats[key] ~= nil then
			currentPlayerStats[key] = value
		end
	end

	-- Update level if provided
	if stats.level and myStatusBar:FindFirstChild("PlayerLevel") then
		myStatusBar.PlayerLevel.Text = "Lv." .. stats.level
		playerClassInfo.level = stats.level
	end

	-- Update class if provided
	if stats.class and myStatusBar:FindFirstChild("PlayerClass") then
		myStatusBar.PlayerClass.Text = stats.class
		playerClassInfo.class = stats.class

		-- ปรับสีตามคลาส
		local classColor = CLASS_COLORS[stats.class] or CLASS_COLORS.Default

		-- ปรับสีแถบสถานะ
		if myStatusBar:FindFirstChild("UIStroke") then
			myStatusBar.UIStroke.Color = classColor
		end

		-- ปรับสี HP และ MP ตามคลาส
		if myStatusBar:FindFirstChild("HPBar") and myStatusBar.HPBar:FindFirstChild("HPFill") then
			if stats.class == "Warrior" or stats.class == "Knight" or stats.class == "Paladin" then
				myStatusBar.HPBar.HPFill.BackgroundColor3 = Color3.fromRGB(220, 60, 60)
			elseif stats.class == "Mage" or stats.class == "Wizard" or stats.class == "Archmage" then
				myStatusBar.HPBar.HPFill.BackgroundColor3 = Color3.fromRGB(180, 60, 60)
			elseif stats.class == "Thief" or stats.class == "Assassin" or stats.class == "Shadow" then
				myStatusBar.HPBar.HPFill.BackgroundColor3 = Color3.fromRGB(200, 80, 60)
			end
		end

		if myStatusBar:FindFirstChild("MPBar") and myStatusBar.MPBar:FindFirstChild("MPFill") then
			if stats.class == "Warrior" or stats.class == "Knight" or stats.class == "Paladin" then
				myStatusBar.MPBar.MPFill.BackgroundColor3 = Color3.fromRGB(60, 60, 180)
			elseif stats.class == "Mage" or stats.class == "Wizard" or stats.class == "Archmage" then
				myStatusBar.MPBar.MPFill.BackgroundColor3 = Color3.fromRGB(80, 80, 220)
			elseif stats.class == "Thief" or stats.class == "Assassin" or stats.class == "Shadow" then
				myStatusBar.MPBar.MPFill.BackgroundColor3 = Color3.fromRGB(60, 100, 180)
			end
		end

		-- แสดงการแจ้งเตือนคลาส (ถ้ามีระบบ NotificationSystem)
		local notificationTemplate = MainGameUI:FindFirstChild("NotificationSystem")
		if notificationTemplate and notificationTemplate:IsA("Frame") then
			local notification = notificationTemplate:Clone()
			notification.Name = "ClassNotification"
			notification.Visible = true

			if notification:FindFirstChild("NotificationText") then
				notification.NotificationText.Text = "Playing as " .. stats.class .. " (HP: " .. (stats.maxHp or currentPlayerStats.maxHp) ..
					", MP: " .. (stats.maxMp or currentPlayerStats.maxMp) .. ")"
			end

			notification.Parent = MainGameUI
			notification:TweenPosition(
				UDim2.new(0.5, 0, 0.3, 0),
				Enum.EasingDirection.Out,
				Enum.EasingStyle.Back,
				0.5,
				true
			)

			delay(4, function()
				notification:TweenPosition(
					UDim2.new(0.5, 0, -0.2, 0),
					Enum.EasingDirection.In,
					Enum.EasingStyle.Quad,
					0.5,
					true,
					function()
						notification:Destroy()
					end
				)
			end)
		end
	end

	-- Update HP if provided
	if stats.hp and stats.maxHp and
		myStatusBar:FindFirstChild("HPBar") and
		myStatusBar.HPBar:FindFirstChild("HPFill") then

		local hpRatio = math.clamp(stats.hp / stats.maxHp, 0, 1)
		createTween(
			myStatusBar.HPBar.HPFill,
			{Size = UDim2.new(hpRatio, 0, 1, 0)},
			0.3
		):Play()

		if myStatusBar.HPBar:FindFirstChild("HPText") then
			myStatusBar.HPBar.HPText.Text = math.floor(stats.hp) .. "/" .. math.floor(stats.maxHp)
		end

		-- Change color based on HP ratio if no class is set
		if not playerClassInfo.class then
			if hpRatio < 0.3 then
				myStatusBar.HPBar.HPFill.BackgroundColor3 = Color3.fromRGB(255, 50, 50)
			elseif hpRatio < 0.6 then
				myStatusBar.HPBar.HPFill.BackgroundColor3 = Color3.fromRGB(255, 200, 50)
			else
				myStatusBar.HPBar.HPFill.BackgroundColor3 = Color3.fromRGB(50, 200, 50)
			end
		end
	end

	-- Update MP if provided
	if stats.mp and stats.maxMp and
		myStatusBar:FindFirstChild("MPBar") and
		myStatusBar.MPBar:FindFirstChild("MPFill") then

		local mpRatio = math.clamp(stats.mp / stats.maxMp, 0, 1)
		createTween(
			myStatusBar.MPBar.MPFill,
			{Size = UDim2.new(mpRatio, 0, 1, 0)},
			0.3
		):Play()

		if myStatusBar.MPBar:FindFirstChild("MPText") then
			myStatusBar.MPBar.MPText.Text = math.floor(stats.mp) .. "/" .. math.floor(stats.maxMp)
		end
	end

	-- Update money if provided
	if stats.money and
		myStatusBar:FindFirstChild("MoneyContainer") and
		myStatusBar.MoneyContainer:FindFirstChild("MoneyAmount") then

		local currentMoney = tonumber(myStatusBar.MoneyContainer.MoneyAmount.Text) or 0
		local newMoney = stats.money

		if newMoney ~= currentMoney then
			local color = newMoney > currentMoney and Color3.fromRGB(100, 255, 100) or Color3.fromRGB(255, 100, 100)
			local startSize = newMoney > currentMoney and 16 or 14
			local easingStyle = newMoney > currentMoney and Enum.EasingStyle.Back or Enum.EasingStyle.Bounce

			myStatusBar.MoneyContainer.MoneyAmount.TextColor3 = color

			local moneyTween = createTween(
				myStatusBar.MoneyContainer.MoneyAmount,
				{TextSize = startSize},
				0.3,
				easingStyle
			)

			moneyTween:Play()
			moneyTween.Completed:Connect(function()
				createTween(
					myStatusBar.MoneyContainer.MoneyAmount,
					{TextSize = 12, TextColor3 = Color3.fromRGB(255, 255, 255)},
					0.3
				):Play()
			end)
		end

		myStatusBar.MoneyContainer.MoneyAmount.Text = tostring(stats.money)
	end

	-- อัปเดตค่าประสบการณ์ถ้ามี
	if stats.exp and stats.nextLevelExp and
		myStatusBar:FindFirstChild("ExpBar") and
		myStatusBar.ExpBar:FindFirstChild("ExpFill") then

		playerClassInfo.exp = stats.exp
		playerClassInfo.nextLevelExp = stats.nextLevelExp

		local expRatio = math.clamp(stats.exp / stats.nextLevelExp, 0, 1)
		createTween(
			myStatusBar.ExpBar.ExpFill,
			{Size = UDim2.new(expRatio, 0, 1, 0)},
			0.5
		):Play()

		if myStatusBar.ExpBar:FindFirstChild("ExpText") then
			myStatusBar.ExpBar.ExpText.Text = "EXP: " .. math.floor(stats.exp) .. "/" .. math.floor(stats.nextLevelExp)
		end
	end
end

-- Update turn indicator function
local function updateTurnIndicator(turnDetails)
	if not CurrentTurnIndicator then return end

	local currentPlayerName = turnDetails.playerName or "Unknown"
	local turnNumber = turnDetails.turnNumber or 1
	local playerClass = turnDetails.playerClass or "Unknown"
	local playerLevel = turnDetails.playerLevel or 1
	local currentPlayerId = turnDetails.playerId

	-- Update turn text
	if CurrentTurnIndicator:FindFirstChild("TurnText") then
		CurrentTurnIndicator.TurnText.Text = currentPlayerName .. "'s Turn (Turn " .. turnNumber .. ")"
	end

	-- Update class and level info
	if CurrentTurnIndicator:FindFirstChild("PlayerClassLabel") then
		CurrentTurnIndicator.PlayerClassLabel.Text = "Class: " .. playerClass
	end
	if CurrentTurnIndicator:FindFirstChild("PlayerLevelLabel") then
		CurrentTurnIndicator.PlayerLevelLabel.Text = "Lv." .. playerLevel
	end

	-- Setup timer if available
	if CurrentTurnIndicator:FindFirstChild("TurnTimerFrame") then
		if turnTimerConnection then
			turnTimerConnection:Disconnect()
			turnTimerConnection = nil
		end
		CurrentTurnIndicator.TurnTimerFrame.Visible = true
	end

	-- Set turn status
	isMyTurn = (currentPlayerId == player.UserId)

	-- Highlight UI if it's player's turn
	if isMyTurn then
		if myStatusBar then
			local highlightColor = CLASS_COLORS[playerClassInfo.class] or Color3.fromRGB(70, 120, 200)
			myStatusBar.BackgroundColor3 = highlightColor:Lerp(Color3.fromRGB(255, 255, 255), 0.7)
			if myStatusBar:FindFirstChild("UIStroke") then
				myStatusBar.UIStroke.Color = highlightColor
				myStatusBar.UIStroke.Thickness = 3
			end
		end

		-- Animate turn indicator
		local originalPosition = CurrentTurnIndicator.Position
		local originalSize = CurrentTurnIndicator.Size
		local expandTween = createTween(
			CurrentTurnIndicator,
			{
				Size = UDim2.new(originalSize.X.Scale + 0.02, 0, originalSize.Y.Scale + 0.02, 0),
				Position = UDim2.new(originalPosition.X.Scale - 0.01, 0, originalPosition.Y.Scale - 0.01, 0),
				BackgroundColor3 = Color3.fromRGB(60, 140, 200)
			}, 0.5, Enum.EasingStyle.Back)
		local contractTween = createTween(
			CurrentTurnIndicator,
			{
				Size = originalSize,
				Position = originalPosition,
				BackgroundColor3 = Color3.fromRGB(50, 100, 150)
			}, 0.5, Enum.EasingStyle.Back)
		expandTween:Play()
		expandTween.Completed:Connect(function() contractTween:Play() end)

		-- แสดงการแจ้งเตือน (ถ้ามีระบบ NotificationSystem)
		local notificationTemplate = MainGameUI:FindFirstChild("NotificationSystem")
		if notificationTemplate and notificationTemplate:IsA("Frame") then
			local newNotification = notificationTemplate:Clone()
			newNotification.Name = "YourTurnNotification"
			newNotification.Visible = true
			if newNotification:FindFirstChild("NotificationText") then
				newNotification.NotificationText.Text = "It's your turn!"
			end
			newNotification.Parent = MainGameUI
			newNotification:TweenPosition(UDim2.new(0.5, 0, 0.7, 0), Enum.EasingDirection.Out, Enum.EasingStyle.Back, 0.7, true)
			delay(2, function()
				newNotification:TweenPosition(UDim2.new(0.5, 0, 1.1, 0), Enum.EasingDirection.In, Enum.EasingStyle.Quad, 0.5, true, function() newNotification:Destroy() end)
			end)
		end
	else
		-- Reset highlights if not player's turn
		if myStatusBar then
			local baseColor = CLASS_COLORS[playerClassInfo.class] or Color3.fromRGB(60, 80, 100)
			myStatusBar.BackgroundColor3 = baseColor:Lerp(Color3.fromRGB(40, 40, 60), 0.7)
			if myStatusBar:FindFirstChild("UIStroke") then
				myStatusBar.UIStroke.Color = baseColor
				myStatusBar.UIStroke.Thickness = 2
			end
		end
		CurrentTurnIndicator.BackgroundColor3 = Color3.fromRGB(80, 80, 100)
	end

	-- Store latest turn data
	turnDetailsData = turnDetails
end

-- Update turn timer function
local function updateTurnTimer(timeRemaining)
	if not CurrentTurnIndicator or
		not CurrentTurnIndicator:FindFirstChild("TurnTimerFrame") or
		not CurrentTurnIndicator.TurnTimerFrame:FindFirstChild("TimerFill") or
		not CurrentTurnIndicator.TurnTimerFrame:FindFirstChild("TimerText") then
		return
	end

	local timerFrame = CurrentTurnIndicator.TurnTimerFrame
	local timerFill = timerFrame.TimerFill
	local timerText = timerFrame.TimerText

	timerText.Text = tostring(timeRemaining) .. "s"
	local maxTime = 120 -- Assuming max time is 120 seconds
	local fillRatio = math.clamp(timeRemaining / maxTime, 0, 1)

	createTween(timerFill, {Size = UDim2.new(fillRatio, 0, 1, 0)}, 0.3):Play()

	if timeRemaining <= 10 then
		timerFill.BackgroundColor3 = Color3.fromRGB(255, 50, 50)
	elseif timeRemaining <= 30 then
		timerFill.BackgroundColor3 = Color3.fromRGB(255, 150, 50)
	else
		timerFill.BackgroundColor3 = Color3.fromRGB(50, 200, 50)
	end
end

-- Setup End Turn button
local function setupEndTurnButton()
	if not EndTurnButton then return nil end

	if not EndTurnButton:GetAttribute("Connected") then
		EndTurnButton.MouseButton1Click:Connect(function()
			if isMyTurn then
				local turnActionEvent = gameRemotes:WaitForChild("TurnAction")
				turnActionEvent:FireServer("endTurn")
				EndTurnButton.Visible = false -- Hide immediately on click
			end
		end)
		EndTurnButton:SetAttribute("Connected", true)
	end

	-- Update button visibility based on turn
	RunService.Heartbeat:Connect(function()
		-- Only show if it's my turn AND MainGameUI is enabled
		EndTurnButton.Visible = isMyTurn and MainGameUI.Enabled

		if EndTurnButton.Visible then
			local classColor = CLASS_COLORS[playerClassInfo.class] or Color3.fromRGB(60, 120, 180)
			EndTurnButton.BackgroundColor3 = classColor
			if EndTurnButton:FindFirstChild("UIStroke") then
				EndTurnButton.UIStroke.Color = classColor:Lerp(Color3.fromRGB(255, 255, 255), 0.5)
			end
		end
	end)

	return EndTurnButton
end

-- Setup button handlers
local function setupButtonHandlers()
	if InventoryButton and not InventoryButton:GetAttribute("Connected") then
		InventoryButton.MouseButton1Click:Connect(function()
			if InventoryUI then
				local shouldBeVisible = not InventoryUI.Visible
				InventoryUI.Visible = shouldBeVisible

				-- *** CHANGE: Hide/Show MainGameUI ***
				MainGameUI.Enabled = not shouldBeVisible

				-- Hide other popups
				if shouldBeVisible and QuestUI then
					QuestUI.Visible = false
				end

				-- Visual feedback
				InventoryButton.BackgroundColor3 = shouldBeVisible and
					Color3.fromRGB(80, 120, 80) or Color3.fromRGB(50, 50, 50)
			end
		end)
		InventoryButton:SetAttribute("Connected", true)
	end

	if QuestButton and not QuestButton:GetAttribute("Connected") then
		QuestButton.MouseButton1Click:Connect(function()
			if QuestUI then
				local shouldBeVisible = not QuestUI.Visible
				QuestUI.Visible = shouldBeVisible

				-- Hide other popups
				if shouldBeVisible and InventoryUI then
					InventoryUI.Visible = false
					-- *** CHANGE: Ensure MainGameUI is shown if Inventory was closed by opening QuestUI ***
					MainGameUI.Enabled = true
					if InventoryButton then
						InventoryButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
					end
				end

				-- Visual feedback
				QuestButton.BackgroundColor3 = shouldBeVisible and
					Color3.fromRGB(80, 120, 80) or Color3.fromRGB(50, 50, 50)
			end
		end)
		QuestButton:SetAttribute("Connected", true)
	end

	-- ตรวจสอบปุ่มปิดใน PopupUI
	if InventoryUI and InventoryUI:FindFirstChild("CloseButton") and not InventoryUI.CloseButton:GetAttribute("Connected") then
		InventoryUI.CloseButton.MouseButton1Click:Connect(function()
			InventoryUI.Visible = false
			-- *** CHANGE: Show MainGameUI when closing Inventory ***
			MainGameUI.Enabled = true
			if InventoryButton then
				InventoryButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
			end
		end)
		InventoryUI.CloseButton:SetAttribute("Connected", true)
	end

	if QuestUI and QuestUI:FindFirstChild("CloseButton") and not QuestUI.CloseButton:GetAttribute("Connected") then
		QuestUI.CloseButton.MouseButton1Click:Connect(function()
			QuestUI.Visible = false
			-- *** CHANGE: Show MainGameUI when closing QuestUI (if Inventory isn't open) ***
			if not InventoryUI.Visible then
				MainGameUI.Enabled = true
			end
			if QuestButton then
				QuestButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
			end
		end)
		QuestUI.CloseButton:SetAttribute("Connected", true)
	end
end

-- แสดงการแจ้งเตือนการเลเวลอัพ (ใช้ระบบที่มีอยู่แล้ว)
local function showLevelUpNotification(newLevel, statIncreases)
	local notificationTemplate = MainGameUI:FindFirstChild("NotificationSystem")
	if notificationTemplate and notificationTemplate:IsA("Frame") then
		local levelUpNotif = notificationTemplate:Clone()
		levelUpNotif.Name = "LevelUpNotification"
		levelUpNotif.Visible = true

		if levelUpNotif:FindFirstChild("NotificationText") then
			local statText = "LEVEL UP! You reached level " .. newLevel .. "!\n"
			for stat, increase in pairs(statIncreases) do
				local statName = stat:gsub("Max", "") -- Simplify name (MaxHP -> HP)
				if increase > 0 then
					statText = statText .. statName .. " +" .. increase .. " "
				end
			end
			levelUpNotif.NotificationText.Text = statText
			levelUpNotif.NotificationText.TextSize = 20
		end

		levelUpNotif.BackgroundColor3 = Color3.fromRGB(80, 120, 200)
		levelUpNotif.Parent = MainGameUI

		levelUpNotif:TweenPosition(UDim2.new(0.5, 0, 0.4, 0), Enum.EasingDirection.Out, Enum.EasingStyle.Back, 0.8, true)
		delay(5, function()
			levelUpNotif:TweenPosition(UDim2.new(0.5, 0, -0.3, 0), Enum.EasingDirection.In, Enum.EasingStyle.Back, 0.6, true, function() levelUpNotif:Destroy() end)
		end)
	end
end

-- Connect remote events
updatePlayerStatsEvent.OnClientEvent:Connect(function(playerId, stats)
	if playerId == player.UserId then
		updateMyStatusBar(stats)
	end
end)

if statChangedEvent then
	statChangedEvent.OnClientEvent:Connect(function(changedStats)
		local statsToUpdate = {}
		for stat, values in pairs(changedStats) do
			statsToUpdate[stat] = values.newValue
			currentPlayerStats[stat] = values.newValue
		end
		if statsToUpdate.hp and not statsToUpdate.maxHp then
			statsToUpdate.maxHp = currentPlayerStats.maxHp
		end
		if statsToUpdate.mp and not statsToUpdate.maxMp then
			statsToUpdate.maxMp = currentPlayerStats.maxMp
		end
		updateMyStatusBar(statsToUpdate)
	end)
end

updateTurnEvent.OnClientEvent:Connect(function(currentPlayerId)
	local turnDetails = {
		playerId = currentPlayerId,
		playerName = "Unknown",
		turnNumber = turnDetailsData and turnDetailsData.turnNumber or 1, -- Try to keep turn number if available
		playerClass = "Unknown",
		playerLevel = 1
	}
	local foundPlayer = Players:GetPlayerByUserId(currentPlayerId)
	if foundPlayer then
		turnDetails.playerName = foundPlayer.Name
		-- Potentially fetch class/level from attributes if available immediately
	end
	updateTurnIndicator(turnDetails)
end)

if updateExpEvent then
	updateExpEvent.OnClientEvent:Connect(function(expData)
		if not myStatusBar then return end
		if myStatusBar:FindFirstChild("ExpBar") and myStatusBar.ExpBar:FindFirstChild("ExpFill") then
			playerClassInfo.exp = expData.exp
			playerClassInfo.nextLevelExp = expData.nextLevelExp
			playerClassInfo.classExp = expData.classExp
			playerClassInfo.nextClassLevelExp = expData.nextClassLevelExp

			local expRatio = math.clamp(expData.exp / expData.nextLevelExp, 0, 1)
			createTween(myStatusBar.ExpBar.ExpFill, {Size = UDim2.new(expRatio, 0, 1, 0)}, 0.5):Play()

			if myStatusBar.ExpBar:FindFirstChild("ExpText") then
				myStatusBar.ExpBar.ExpText.Text = "EXP: " .. math.floor(expData.exp) .. "/" .. math.floor(expData.nextLevelExp)
			end
		end
	end)
end

levelUpEvent.OnClientEvent:Connect(function(newLevel, statIncreases)
	playerClassInfo.level = newLevel
	showLevelUpNotification(newLevel, statIncreases)
	if myStatusBar and myStatusBar:FindFirstChild("PlayerLevel") then
		myStatusBar.PlayerLevel.Text = "Lv." .. newLevel
	end
	-- Server should send UpdatePlayerStats after level up
end)

classLevelUpEvent.OnClientEvent:Connect(function(newClassLevel, statIncreases, nextClass)
	playerClassInfo.classLevel = newClassLevel

	local notificationTemplate = MainGameUI:FindFirstChild("NotificationSystem")
	if notificationTemplate and notificationTemplate:IsA("Frame") then
		local classLevelUpNotif = notificationTemplate:Clone()
		classLevelUpNotif.Name = "ClassLevelUpNotification"
		classLevelUpNotif.Visible = true

		if classLevelUpNotif:FindFirstChild("NotificationText") then
			local message = "CLASS LEVEL UP! " .. (playerClassInfo.class or "Class") .. " reached level " .. newClassLevel
			if nextClass then
				message = message .. "\nUpgrade to " .. nextClass .. " is now available!"
			end
			classLevelUpNotif.NotificationText.Text = message
		end

		local classColor = CLASS_COLORS[playerClassInfo.class] or Color3.fromRGB(80, 120, 200)
		classLevelUpNotif.BackgroundColor3 = classColor
		classLevelUpNotif.Parent = MainGameUI

		classLevelUpNotif:TweenPosition(UDim2.new(0.5, 0, 0.4, 0), Enum.EasingDirection.Out, Enum.EasingStyle.Back, 0.8, true)
		delay(5, function()
			classLevelUpNotif:TweenPosition(UDim2.new(0.5, 0, -0.3, 0), Enum.EasingDirection.In, Enum.EasingStyle.Back, 0.6, true, function() classLevelUpNotif:Destroy() end)
		end)
	end
end)

if updateTurnDetailsEvent then
	updateTurnDetailsEvent.OnClientEvent:Connect(updateTurnIndicator)
end

if updateTurnTimerEvent then
	updateTurnTimerEvent.OnClientEvent:Connect(updateTurnTimer)
end

endGameEvent.OnClientEvent:Connect(function(reason)
	local GameOverScreen = PlayerGui:WaitForChild("GameOverScreen")
	if GameOverScreen then
		GameOverScreen.Enabled = true
		MainGameUI.Enabled = false
		if PopupUI then PopupUI.Enabled = false end

		local Background = GameOverScreen:FindFirstChild("Background")
		if Background then
			local WinnerAnnouncement = Background:FindFirstChild("WinnerAnnouncement")
			if WinnerAnnouncement then
				WinnerAnnouncement.Text = reason
			end
		end
	end
end)

-- Initialize UI
MainGameUI.Enabled = false -- Start disabled, enabled by server or ClassSelection
if PopupUI then
	PopupUI.Enabled = true -- Container is always enabled
	if InventoryUI then InventoryUI.Visible = false end
	if QuestUI then QuestUI.Visible = false end
end

-- Setup initial UI elements
myStatusBar = setupPlayerStatusBar()
setupButtonHandlers()
setupEndTurnButton()

-- Ensure status bar exists when UI becomes enabled
MainGameUI:GetPropertyChangedSignal("Enabled"):Connect(function()
	if MainGameUI.Enabled and not myStatusBar then
		myStatusBar = setupPlayerStatusBar()
	end
end)

print("[MainGameUIHandler] Initialized.")
