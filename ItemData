-- ItemData.lua
-- ข้อมูลไอเทมทั้งหมดในเกม (เวอร์ชันทดสอบ)
-- Version: 1.2.0 - เพิ่ม UseHandlers สำหรับไอเทม DiceBonus

-- Constants
local ITEM_TYPES = {
	GENERAL = 1,    -- ไอเทมทั่วไป
	EQUIPMENT = 2,  -- อาวุธและเกราะ
	SKILL = 3,      -- คัมภีร์สกิล
	SPECIAL = 4     -- ไอเทมพิเศษ/เควส
}

local EQUIPMENT_SLOTS = {
	WEAPON = 1,
	HELMET = 2,
	ARMOR = 3,
	GLOVES = 4,
	BOOTS = 5,
	ACCESSORY = 6
}

local ItemData = {}

-- ฟังก์ชันใช้ไอเทม (จะถูกกำหนดโดย InventoryService)
ItemData.UseHandlers = {
	-- ฟังก์ชันใช้งาน DiceBonus+1
	dice_bonus_1 = function(player, itemData)
		local Players = game:GetService("Players")
		local ReplicatedStorage = game:GetService("ReplicatedStorage")

		-- ตรวจสอบว่ามี GameManager หรือไม่
		if _G.GameManager then
			-- ถ้ามี DiceManager ให้บันทึกโบนัสลงไป
			if _G.GameManager.diceManager then
				local success = pcall(function()
					_G.GameManager.diceManager:AddDiceBonus(player.UserId, 1)
				end)

				if success then
					return true, "เพิ่มโบนัสลูกเต๋า +1 สำหรับการทอยครั้งถัดไป"
				end
			end

			-- ถ้ามี PlayerManager ให้บันทึกโบนัสลงใน PlayerData
			if _G.GameManager.playerManager then
				local playerData = _G.GameManager.playerManager:GetPlayerData(player)
				if playerData then
					-- สร้างหรืออัพเดท diceBonus ในข้อมูลผู้เล่น
					playerData.diceBonus = (playerData.diceBonus or 0) + 1

					-- แจ้งเตือนผู้เล่น
					local uiRemotes = ReplicatedStorage:FindFirstChild("Remotes") and 
						ReplicatedStorage.Remotes:FindFirstChild("UIRemotes")

					if uiRemotes and uiRemotes:FindFirstChild("NotifyDiceBonus") then
						uiRemotes.NotifyDiceBonus:FireClient(player, playerData.diceBonus)
					end

					return true, "เพิ่มโบนัสลูกเต๋า +1 สำหรับการทอยครั้งถัดไป"
				end
			end
		end

		-- ถ้าไม่พบ GameManager หรือวิธีบันทึกโบนัส ให้บันทึกใน attribute ของผู้เล่น
		player:SetAttribute("DiceBonus", (player:GetAttribute("DiceBonus") or 0) + 1)
		return true, "เพิ่มโบนัสลูกเต๋า +1 สำหรับการทอยครั้งถัดไป"
	end,

	-- ฟังก์ชันใช้งาน DiceBonus+2
	dice_bonus_2 = function(player, itemData)
		local Players = game:GetService("Players")
		local ReplicatedStorage = game:GetService("ReplicatedStorage")

		-- ตรวจสอบว่ามี GameManager หรือไม่
		if _G.GameManager then
			-- ถ้ามี DiceManager ให้บันทึกโบนัสลงไป
			if _G.GameManager.diceManager then
				local success = pcall(function()
					_G.GameManager.diceManager:AddDiceBonus(player.UserId, 2)
				end)

				if success then
					return true, "เพิ่มโบนัสลูกเต๋า +2 สำหรับการทอยครั้งถัดไป"
				end
			end

			-- ถ้ามี PlayerManager ให้บันทึกโบนัสลงใน PlayerData
			if _G.GameManager.playerManager then
				local playerData = _G.GameManager.playerManager:GetPlayerData(player)
				if playerData then
					-- สร้างหรืออัพเดท diceBonus ในข้อมูลผู้เล่น
					playerData.diceBonus = (playerData.diceBonus or 0) + 2

					-- แจ้งเตือนผู้เล่น
					local uiRemotes = ReplicatedStorage:FindFirstChild("Remotes") and 
						ReplicatedStorage.Remotes:FindFirstChild("UIRemotes")

					if uiRemotes and uiRemotes:FindFirstChild("NotifyDiceBonus") then
						uiRemotes.NotifyDiceBonus:FireClient(player, playerData.diceBonus)
					end

					return true, "เพิ่มโบนัสลูกเต๋า +2 สำหรับการทอยครั้งถัดไป"
				end
			end
		end

		-- ถ้าไม่พบ GameManager หรือวิธีบันทึกโบนัส ให้บันทึกใน attribute ของผู้เล่น
		player:SetAttribute("DiceBonus", (player:GetAttribute("DiceBonus") or 0) + 2)
		return true, "เพิ่มโบนัสลูกเต๋า +2 สำหรับการทอยครั้งถัดไป"
	end
}

-- ไอเทมสำหรับทดสอบ
ItemData.Items = {
	-- ไอเทมทดสอบ
	test_item = {
		id = "test_item",
		name = "Test Item",
		description = "This is a test item for inventory system.",
		type = ITEM_TYPES.GENERAL,
		rarity = 1,
		stackable = true,
		maxStack = 99,
		sellPrice = 10,
		buyPrice = 20,
		usable = true,
		consumable = true,
		iconId = "rbxassetid://6675226918", -- เปลี่ยน ID ตามที่ต้องการ
		stats = {
			hp = 50
		}
	},

	-- เพิ่ม DiceBonus+1
	dice_bonus_1 = {
		id = "dice_bonus_1",
		name = "Dice Bonus +1",
		description = "เพิ่มแต้มลูกเต๋า +1 ในตาถัดไป",
		type = ITEM_TYPES.SPECIAL,
		rarity = 2,
		stackable = true,
		maxStack = 5,
		sellPrice = 100,
		buyPrice = 300,
		usable = true,
		consumable = true,
		iconId = "rbxassetid://106756897158809", -- เปลี่ยน ID ตามที่ต้องการ
		stats = {}
	},

	-- เพิ่ม DiceBonus+2
	dice_bonus_2 = {
		id = "dice_bonus_2",
		name = "Dice Bonus +2",
		description = "เพิ่มแต้มลูกเต๋า +2 ในตาถัดไป",
		type = ITEM_TYPES.SPECIAL,
		rarity = 3,
		stackable = true,
		maxStack = 3,
		sellPrice = 200,
		buyPrice = 600,
		usable = true,
		consumable = true,
		iconId = "rbxassetid://106756897158809", -- เปลี่ยน ID ตามที่ต้องการ
		stats = {}
	}
}

-- อุปกรณ์ทดสอบ
ItemData.Equipment = {
	-- อุปกรณ์ทดสอบ
	test_equipment = {
		id = "test_equipment",
		name = "Test Equipment",
		description = "This is a test equipment for inventory system.",
		type = ITEM_TYPES.EQUIPMENT,
		subType = EQUIPMENT_SLOTS.WEAPON,
		rarity = 2,
		stackable = false,
		maxStack = 1,
		sellPrice = 100,
		buyPrice = 300,
		usable = false,
		iconId = "rbxassetid://6675226140", -- เปลี่ยน ID ตามที่ต้องการ
		stats = {
			attack = 10,
			defense = 5
		}
	}
}

-- ค้นหาไอเทมจาก ID
function ItemData.GetItemById(itemId)
	-- ค้นหาในไอเทมทั่วไป
	if ItemData.Items[itemId] then
		return ItemData.Items[itemId]
	end

	-- ค้นหาในอุปกรณ์
	if ItemData.Equipment[itemId] then
		return ItemData.Equipment[itemId]
	end

	return nil
end

-- ฟังก์ชั่นเพิ่มเติมที่อาจจำเป็น
function ItemData.GetItemsByType(itemType)
	local result = {}

	-- ค้นหาในไอเทมทั่วไป
	for id, item in pairs(ItemData.Items) do
		if item.type == itemType then
			table.insert(result, item)
		end
	end

	-- ค้นหาในอุปกรณ์
	for id, item in pairs(ItemData.Equipment) do
		if item.type == itemType then
			table.insert(result, item)
		end
	end

	return result
end

-- ส่งออกค่าคงที่
ItemData.ITEM_TYPES = ITEM_TYPES
ItemData.EQUIPMENT_SLOTS = EQUIPMENT_SLOTS

return ItemData
