-- EventTileService.server.lua
-- ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ä‡πà‡∏≠‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ö‡∏ô‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡πÄ‡∏Å‡∏° (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ 100%)
-- Version: 1.1.0

local ServerStorage = game:GetService("ServerStorage")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")

-- ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
local Modules = ServerStorage:WaitForChild("Modules")
local EventTileSystem

-- ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÇ‡∏´‡∏•‡∏î EventTileSystem Module
local function loadEventTileSystemModule()
	local success, result = pcall(function()
		return require(Modules:WaitForChild("EventTileSystem"))
	end)

	if success then
		print("‚úÖ [EventTileService] ‡πÇ‡∏´‡∏•‡∏î EventTileSystem Module ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
		return result
	else
		warn("‚ùå [EventTileService] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î EventTileSystem Module ‡πÑ‡∏î‡πâ: " .. tostring(result))
		-- ‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ module ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
		for _, child in ipairs(Modules:GetChildren()) do
			if child.Name:find("EventTile") then
				print("üîÑ [EventTileService] ‡∏û‡∏ö Module ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á: " .. child.Name .. " ‡∏à‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
				return require(child)
			end
		end
		return nil
	end
end

-- ‡∏£‡∏±‡∏ö GameManager ‡∏à‡∏≤‡∏Å global variable ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á stub ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö
local function getGameManager()
	if _G.GameManager then
		print("‚úÖ [EventTileService] ‡∏û‡∏ö GameManager")
		return _G.GameManager
	end

	-- ‡∏£‡∏≠ GameManager ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°
	local startTime = tick()
	while not _G.GameManager and tick() - startTime < 10 do
		print("‚è≥ [EventTileService] ‡∏£‡∏≠ GameManager...")
		task.wait(1)
	end

	if _G.GameManager then
		print("‚úÖ [EventTileService] ‡∏û‡∏ö GameManager ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏≠")
		return _G.GameManager
	end

	-- ‡∏™‡∏£‡πâ‡∏≤‡∏á stub ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö GameManager
	print("‚ö†Ô∏è [EventTileService] ‡πÑ‡∏°‡πà‡∏û‡∏ö GameManager ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á stub ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß")
	local stubGameManager = {
		playerManager = {
			GetPlayerData = function(_, player)
				print("‚ö†Ô∏è [STUB] GetPlayerData ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö " .. player.Name)
				return {
					stats = {
						money = 1000
					}
				}
			end,
			UpdatePlayerStats = function(_, player, stats)
				print("‚ö†Ô∏è [STUB] UpdatePlayerStats ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö " .. player.Name .. " - ‡∏Ñ‡πà‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà: " .. (stats.money or "N/A"))
				return true
			end
		}
	}

	return stubGameManager
end

-- Debug mode
local DEBUG_MODE = true

-- Helper function for debug logging
local function debugLog(message)
	if DEBUG_MODE then
		print("[EventTileService] " .. message)
	end
end

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
local function initializeEventTileService()
	print("üöÄ [EventTileService] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô EventTileService...")

	-- ‡πÇ‡∏´‡∏•‡∏î EventTileSystem Module
	EventTileSystem = loadEventTileSystemModule()
	if not EventTileSystem then
		warn("‚ùå [EventTileService] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î EventTileSystem Module ‡πÑ‡∏î‡πâ ‡∏à‡∏∞‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
		return
	end

	-- ‡∏£‡∏±‡∏ö GameManager
	local gameManager = getGameManager()
	if not gameManager then 
		warn("‚ùå [EventTileService] ‡πÑ‡∏°‡πà‡∏û‡∏ö GameManager ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠...")
		-- Wait for GameManager to be available
		gameManager = getGameManager()
	end

	-- Create EventTileSystem
	print("üîß [EventTileService] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á EventTileSystem...")
	local eventTileSystem = EventTileSystem.new(gameManager)

	-- ‡πÄ‡∏û‡∏¥‡πà‡∏° eventTileSystem ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô gameManager ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
	if gameManager then
		gameManager.eventTileSystem = eventTileSystem
		print("‚úÖ [EventTileService] ‡πÄ‡∏û‡∏¥‡πà‡∏° eventTileSystem ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô gameManager ‡πÅ‡∏•‡πâ‡∏ß")
	end

	-- Get the BoardSystem
	local boardSystem = gameManager and gameManager.boardSystem
	if not boardSystem then
		print("‚ö†Ô∏è [EventTileService] ‡πÑ‡∏°‡πà‡∏û‡∏ö BoardSystem ‡πÉ‡∏ô gameManager")

		-- ‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∑‡πà‡∏ô ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ BoardSystem ‡πÉ‡∏ô global variable
		if _G.BoardSystem then
			boardSystem = _G.BoardSystem
			print("‚úÖ [EventTileService] ‡∏û‡∏ö BoardSystem ‡πÉ‡∏ô global variable")
		else
			print("‚ö†Ô∏è [EventTileService] ‡πÑ‡∏°‡πà‡∏û‡∏ö BoardSystem ‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡∏ó‡∏µ‡πà ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠")
		end
	end

	-- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Remote Events ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
	local remotes = ReplicatedStorage:WaitForChild("Remotes")
	local boardRemotes = remotes:WaitForChild("BoardRemotes")
	local tileTriggerEvent = boardRemotes:WaitForChild("TileTriggerEvent")

	if boardSystem then
		-- Connect to BoardService's onTileEffect callback to catch when players land on tiles
		if boardSystem.onTileEffect then
			local originalCallback = boardSystem.onTileEffect
			boardSystem.onTileEffect = function(playerId, tileId, tileInfo)
				-- Call the original callback first
				originalCallback(playerId, tileId, tileInfo)

				-- Get the player object
				local player = Players:GetPlayerByUserId(playerId)
				if player then
					-- Process the tile event on the server side
					print("üèÆ [EventTileService] ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô " .. player.Name .. " ‡∏ï‡∏Å‡∏ä‡πà‡∏≠‡∏á " .. tileId .. " ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó " .. tostring(tileInfo.type))
					task.spawn(function()
						eventTileSystem:ProcessTileEvent(player, tileId, tileInfo.type)
					end)
				end
			end
			print("‚úÖ [EventTileService] ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö BoardSystem.onTileEffect ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
		else
			print("‚ö†Ô∏è [EventTileService] BoardSystem.onTileEffect ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")

			-- ‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö TileTriggerEvent
			tileTriggerEvent.OnServerEvent:Connect(function(player, tileId, tileType)
				print("üèÆ [EventTileService] ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå TileTriggerEvent: ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô " .. player.Name .. " ‡∏ï‡∏Å‡∏ä‡πà‡∏≠‡∏á " .. tileId .. " ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó " .. tileType)
				eventTileSystem:ProcessTileEvent(player, tileId, tileType)
			end)
			print("‚úÖ [EventTileService] ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö TileTriggerEvent ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
		end
	else
		print("‚ö†Ô∏è [EventTileService] ‡πÑ‡∏°‡πà‡∏û‡∏ö BoardSystem ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")

		-- ‡∏ó‡∏≤‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö TileTriggerEvent
		tileTriggerEvent.OnServerEvent:Connect(function(player, tileId, tileType)
			print("üèÆ [EventTileService] ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå TileTriggerEvent: ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô " .. player.Name .. " ‡∏ï‡∏Å‡∏ä‡πà‡∏≠‡∏á " .. tileId .. " ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó " .. tileType)
			eventTileSystem:ProcessTileEvent(player, tileId, tileType)
		end)
		print("‚úÖ [EventTileService] ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö TileTriggerEvent ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
	end

	-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà
	local function testEventTileForNewPlayer(player)
		-- ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
		task.wait(10)

		-- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
		if not player or not player:IsDescendantOf(game) then
			return
		end

		-- ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏á‡∏¥‡∏ô
		print("üß™ [EventTileService] ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà: " .. player.Name)
		eventTileSystem:TestWithPlayer(player, "money", 13)
	end

	-- ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà
	if false then -- ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
		Players.PlayerAdded:Connect(testEventTileForNewPlayer)
	end

	-- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏ô global
	_G.TestEventTileForPlayer = function(player)
		if not player then
			local players = Players:GetPlayers()
			if #players == 0 then
				print("‚ùå [EventTileService] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ô‡πÄ‡∏Å‡∏°")
				return
			end
			player = players[1]
		end

		print("üß™ [EventTileService] ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô: " .. player.Name)
		eventTileSystem:TestWithPlayer(player, "money", 13)
	end

	print("üéÆ [EventTileService] EventTileService ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
	print("üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏û‡∏¥‡∏°‡∏û‡πå _G.TestEventTileForPlayer() ‡πÉ‡∏ô Command Bar ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏Å‡∏ä‡πà‡∏≠‡∏á 13 (‡∏ä‡πà‡∏≠‡∏á‡πÄ‡∏á‡∏¥‡∏ô)")

	return eventTileSystem
end

-- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
local eventTileSystem = initializeEventTileService()
_G.EventTileSystem = eventTileSystem

-- ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ
if eventTileSystem then
	print("‚úÖ‚úÖ‚úÖ [EventTileService] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ‚úÖ‚úÖ")
else
	warn("‚ùå‚ùå‚ùå [EventTileService] ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‚ùå‚ùå‚ùå")
end

return eventTileSystem
