-- EventTileServerHandler.server.lua
-- ‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ä‡πà‡∏≠‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢ (‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡πÑ‡∏Ñ‡∏•‡πÄ‡∏≠‡∏ô‡∏ï‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å)
-- Version: 1.0.0

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local ServerStorage = game:GetService("ServerStorage")

-- Debug mode
local DEBUG_MODE = true

-- Helper function for debug logging
local function debugLog(message)
	if DEBUG_MODE then
		print("[EventTileServerHandler] " .. message)
	end
end

-- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö RemoteEvents
local remotes = ReplicatedStorage:WaitForChild("Remotes")
local eventTileRemotes = remotes:FindFirstChild("EventTileRemotes")
if not eventTileRemotes then
	eventTileRemotes = Instance.new("Folder")
	eventTileRemotes.Name = "EventTileRemotes"
	eventTileRemotes.Parent = remotes
	debugLog("‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå EventTileRemotes")
end

local moneyEventRemote = eventTileRemotes:FindFirstChild("MoneyEvent")
if not moneyEventRemote then
	moneyEventRemote = Instance.new("RemoteEvent")
	moneyEventRemote.Name = "MoneyEvent"
	moneyEventRemote.Parent = eventTileRemotes
	debugLog("‡∏™‡∏£‡πâ‡∏≤‡∏á MoneyEvent RemoteEvent")
end

local uiRemotes = remotes:WaitForChild("UIRemotes")
local updatePlayerStatsEvent = uiRemotes:FindFirstChild("UpdatePlayerStats")
local statChangedEvent = uiRemotes:FindFirstChild("StatChanged")

-- ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏´‡∏≤ PlayerManager
local function getPlayerManager()
	-- ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡∏ú‡πà‡∏≤‡∏ô GameManager
	if _G.GameManager and _G.GameManager.playerManager then
		debugLog("‡∏û‡∏ö PlayerManager ‡∏ú‡πà‡∏≤‡∏ô GameManager")
		return _G.GameManager.playerManager
	end

	-- ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡∏î‡∏π‡πÉ‡∏ô global variables
	if _G.PlayerManager then
		debugLog("‡∏û‡∏ö PlayerManager ‡πÉ‡∏ô global variables")
		return _G.PlayerManager
	end

	-- ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3: ‡∏™‡∏£‡πâ‡∏≤‡∏á stub (‡∏à‡∏≥‡∏•‡∏≠‡∏á)
	debugLog("‡πÑ‡∏°‡πà‡∏û‡∏ö PlayerManager ‡∏™‡∏£‡πâ‡∏≤‡∏á stub")
	return {
		GetPlayerData = function(_, player)
			return {
				stats = {
					money = 1000
				}
			}
		end,
		UpdatePlayerStats = function(_, player, stats)
			print("‚ö†Ô∏è [STUB] UpdatePlayerStats ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö " .. player.Name .. " - ‡∏Ñ‡πà‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà: " .. (stats.money or "N/A"))
			return true
		end
	}
end

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏á‡∏¥‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
local function updatePlayerMoney(player, amount)
	local playerManager = getPlayerManager()
	if not playerManager then
		warn("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤ PlayerManager ‡πÑ‡∏î‡πâ")
		return false
	end

	-- ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
	local playerData = playerManager.GetPlayerData(playerManager, player)
	if not playerData or not playerData.stats then
		warn("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏î‡πâ")
		return false
	end

	-- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏¥‡∏°
	local oldMoney = playerData.stats.money or 0

	-- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
	if type(oldMoney) ~= "number" then
		warn("‡∏û‡∏ö‡∏Ñ‡πà‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: " .. tostring(oldMoney) .. " ‡∏à‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô 0")
		oldMoney = 0
	end

	-- ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà
	local newMoney = oldMoney + amount

	-- ‡πÉ‡∏ä‡πâ UpdatePlayerStats ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
	local success = false
	if playerManager.UpdatePlayerStats then
		success = pcall(function()
			return playerManager.UpdatePlayerStats(playerManager, player, {
				money = newMoney
			})
		end)
	end

	if success then
		debugLog("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ú‡πà‡∏≤‡∏ô UpdatePlayerStats: " .. oldMoney .. " -> " .. newMoney)
	else
		debugLog("UpdatePlayerStats ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏≠‡∏∑‡πà‡∏ô")

		-- ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
		if playerData.stats then
			playerData.stats.money = newMoney
			debugLog("‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏á‡∏¥‡∏ô‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÉ‡∏ô playerData: " .. oldMoney .. " -> " .. newMoney)
			success = true
		end

		-- ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3: ‡∏™‡πà‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏Ñ‡∏•‡πÄ‡∏≠‡∏ô‡∏ï‡πå
		if statChangedEvent then
			statChangedEvent:FireClient(player, {
				money = {
					oldValue = oldMoney,
					newValue = newMoney
				}
			})
			debugLog("‡∏™‡πà‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå StatChanged ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏Ñ‡∏•‡πÄ‡∏≠‡∏ô‡∏ï‡πå")
		end

		-- ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 4: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ SyncPlayerStats ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
		if playerManager.SyncPlayerStats then
			pcall(function()
				playerManager.SyncPlayerStats(playerManager, player)
				debugLog("‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ SyncPlayerStats ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
			end)
		end
	end

	return success
end

-- ‡∏£‡∏±‡∏ö‡∏ü‡∏±‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å‡πÑ‡∏Ñ‡∏•‡πÄ‡∏≠‡∏ô‡∏ï‡πå
moneyEventRemote.OnServerEvent:Connect(function(player, command, amount)
	debugLog("‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏Ñ‡∏•‡πÄ‡∏≠‡∏ô‡∏ï‡πå: " .. tostring(command) .. " ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: " .. tostring(amount))

	if command == "updateMoney" and amount > 0 then
		local success = updatePlayerMoney(player, amount)

		if success then
			debugLog("üí∞ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö " .. player.Name .. " ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: " .. amount)
		else
			warn("‚ùå ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏á‡∏¥‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö " .. player.Name)
		end
	end
end)

-- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å‡πÉ‡∏ô‡πÄ‡∏Å‡∏°
local function testUpdateMoney(player, amount)
	if not player then
		local players = Players:GetPlayers()
		if #players == 0 then
			warn("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏ô‡πÄ‡∏Å‡∏°")
			return false
		end
		player = players[1]
	end

	amount = amount or math.random(500, 2000)

	debugLog("‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö " .. player.Name .. " ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô " .. amount)

	-- ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏á‡∏¥‡∏ô
	local success = updatePlayerMoney(player, amount)

	-- ‡∏™‡πà‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏Ñ‡∏•‡πÄ‡∏≠‡∏ô‡∏ï‡πå
	if success then
		moneyEventRemote:FireClient(player, amount, true)
		debugLog("‡∏™‡πà‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏Ñ‡∏•‡πÄ‡∏≠‡∏ô‡∏ï‡πå")
	end

	return success
end

-- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô global variables
_G.TestUpdateMoney = testUpdateMoney

print("================ ‡∏£‡∏∞‡∏ö‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå (Event Tile Server Handler) ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß ================")
print("‡∏û‡∏¥‡∏°‡∏û‡πå _G.TestUpdateMoney() ‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏á‡∏¥‡∏ô")
