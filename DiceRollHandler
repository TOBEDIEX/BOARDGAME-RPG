-- DiceRollHandler.lua
-- จัดการหน้าทอยลูกเต๋าและเลือกเส้นทาง
-- Version: 1.2.0 (Optimized)

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")

-- Get local player
local player = Players.LocalPlayer

-- Get UI elements
local PlayerGui = player:WaitForChild("PlayerGui")
local PopupUI = PlayerGui:WaitForChild("PopupUI")
local DiceRollUI = PopupUI:WaitForChild("DiceRollUI")

-- Validate UI exists
if not DiceRollUI then
	warn("DiceRollUI not found in PopupUI")
	return
end

-- Get UI components
local DiceWheel = DiceRollUI:FindFirstChild("DiceWheel")
local DiceResult = DiceWheel and DiceWheel:FindFirstChild("DiceResult")
local RollButton = DiceRollUI:FindFirstChild("RollButton")
local PathSelectionContainer = DiceRollUI:FindFirstChild("PathSelectionContainer")
local RemainingStepsText = PathSelectionContainer and PathSelectionContainer:FindFirstChild("RemainingStepsText")
local ForwardButton = PathSelectionContainer and PathSelectionContainer:FindFirstChild("ForwardButton")
local LeftButton = PathSelectionContainer and PathSelectionContainer:FindFirstChild("LeftButton")
local RightButton = PathSelectionContainer and PathSelectionContainer:FindFirstChild("RightButton")

-- Validate required UI components
if not DiceWheel or not DiceResult or not RollButton or not PathSelectionContainer 
	or not RemainingStepsText or not ForwardButton or not LeftButton or not RightButton then
	warn("Some required UI elements for DiceRollUI are missing")
	return
end

-- Get remotes
local remotes = ReplicatedStorage:WaitForChild("Remotes")
local boardRemotes = remotes:WaitForChild("BoardRemotes")
local gameRemotes = remotes:WaitForChild("GameRemotes")

-- Get remote events
local rollDiceEvent = boardRemotes:WaitForChild("RollDice")
local showPathSelectionEvent = boardRemotes:WaitForChild("ShowPathSelection")
local choosePathEvent = boardRemotes:WaitForChild("ChoosePath")
local updateTurnEvent = gameRemotes:WaitForChild("UpdateTurn")

-- Constants
local DICE_ANIMATION_DURATION = 2
local DICE_VALUES = {1, 2, 3, 4, 5, 6}
local DIRECTIONS = {
	FRONT = "FRONT",
	LEFT = "LEFT",
	RIGHT = "RIGHT"
}

-- Variables
local isRolling = false
local canRoll = false
local currentDiceResult = nil
local currentPathChoices = nil
local remainingSteps = 0
local DEBUG_MODE = false

-- Debug helper function
local function debugLog(message)
	if DEBUG_MODE then
		print("[DiceRollHandler] " .. message)
	end
end

-- Show dice roll UI
local function showDiceRollUI()
	DiceRollUI.Visible = true
	RollButton.Visible = true
	PathSelectionContainer.Visible = false

	-- Reset UI state
	DiceResult.Text = ""
	RemainingStepsText.Text = "Steps: 0"
	ForwardButton.Visible = false
	LeftButton.Visible = false
	RightButton.Visible = false

	isRolling = false
	currentDiceResult = nil
	currentPathChoices = nil
	remainingSteps = 0

	debugLog("Dice Roll UI shown")
end

-- Hide dice roll UI
local function hideDiceRollUI()
	DiceRollUI.Visible = false
	isRolling = false
	canRoll = false
	debugLog("Dice Roll UI hidden")
end

-- Animate dice roll
local function animateDiceRoll(finalResult)
	if isRolling then return end

	isRolling = true
	RollButton.Visible = false

	-- Create animation sequence
	local startTime = tick()
	local endTime = startTime + DICE_ANIMATION_DURATION
	local frameRate = 0.1
	local lastUpdate = 0

	-- Animation loop
	while tick() < endTime do
		local currentTime = tick()
		if currentTime - lastUpdate >= frameRate then
			lastUpdate = currentTime

			-- Show random value
			local randomValue = DICE_VALUES[math.random(1, #DICE_VALUES)]
			DiceResult.Text = tostring(randomValue)

			-- Slow down animation near end
			local timeLeft = endTime - currentTime
			if timeLeft < 1 then
				frameRate = 0.2
			end

			wait(frameRate)
		end
	end

	-- Show final result
	DiceResult.Text = tostring(finalResult)

	-- Tween effect for final result
	local resultTween = TweenService:Create(
		DiceResult,
		TweenInfo.new(0.5, Enum.EasingStyle.Bounce, Enum.EasingDirection.Out),
		{TextSize = 60}
	)
	resultTween:Play()

	wait(0.5)

	-- Reset size
	local resetTween = TweenService:Create(
		DiceResult,
		TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
		{TextSize = 36}
	)
	resetTween:Play()

	isRolling = false
	currentDiceResult = finalResult
	remainingSteps = finalResult

	wait(0.3)

	-- Send result to server
	rollDiceEvent:FireServer(finalResult)

	return finalResult
end

-- Show path choices
local function showPathChoices(choices)
	PathSelectionContainer.Visible = true
	RemainingStepsText.Text = "Steps: " .. remainingSteps
	wait(0.5) -- Small delay to ensure UI updates

	-- Reset buttons
	ForwardButton.Visible = false
	LeftButton.Visible = false
	RightButton.Visible = false

	-- Show available direction buttons
	for _, choice in ipairs(choices) do
		if choice.direction == DIRECTIONS.FRONT then
			ForwardButton.Visible = true
		elseif choice.direction == DIRECTIONS.LEFT then
			LeftButton.Visible = true
		elseif choice.direction == DIRECTIONS.RIGHT then
			RightButton.Visible = true
		end
	end

	currentPathChoices = choices
end

-- Choose path direction
local function choosePath(direction)
	if not currentPathChoices then return end

	-- Hide buttons during movement
	ForwardButton.Visible = false
	LeftButton.Visible = false
	RightButton.Visible = false

	-- Send choice to server
	choosePathEvent:FireServer(direction)

	-- Update remaining steps
	remainingSteps = remainingSteps - 1
	RemainingStepsText.Text = "Steps: " .. remainingSteps

	if remainingSteps <= 0 then
		PathSelectionContainer.Visible = false
	end
end

-- Button event handlers
RollButton.Activated:Connect(function()
	if not isRolling and canRoll then
		local diceResult = math.random(1, 6)
		animateDiceRoll(diceResult)
	end
end)

ForwardButton.Activated:Connect(function()
	choosePath(DIRECTIONS.FRONT)
end)

LeftButton.Activated:Connect(function()
	choosePath(DIRECTIONS.LEFT)
end)

RightButton.Activated:Connect(function()
	choosePath(DIRECTIONS.RIGHT)
end)

-- Remote event handlers
showPathSelectionEvent.OnClientEvent:Connect(showPathChoices)

updateTurnEvent.OnClientEvent:Connect(function(currentPlayerId)
	local isMyTurn = currentPlayerId == player.UserId

	if isMyTurn then
		showDiceRollUI()
		canRoll = true
	else
		hideDiceRollUI()
		canRoll = false
	end
end)

-- Initial setup
DiceRollUI.Visible = false

-- Export the module for other scripts to use
local DiceRollHandler = {}
DiceRollHandler.ShowUI = showDiceRollUI
DiceRollHandler.HideUI = hideDiceRollUI

return DiceRollHandler
