-- InventoryService.server.lua
-- บริการจัดการระบบ Inventory ฝั่งเซิร์ฟเวอร์ (ไม่ใช้ DataStore)
-- Version: 3.1.0 (แก้ไขให้ฟื้น HP เต็มเมื่อใส่อุปกรณ์)

-- Services
local ServerStorage = game:GetService("ServerStorage")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")

-- Load dependencies
local Modules = ServerStorage:WaitForChild("Modules")
local InventorySystem = require(Modules:WaitForChild("InventorySystem"))
local ItemData

-- ใช้ pcall ในการโหลด ItemData เพื่อป้องกันความผิดพลาด
local success, result = pcall(function()
	return require(ReplicatedStorage:FindFirstChild("SharedModules"):WaitForChild("ItemData"))
end)

if success then
	ItemData = result
	print("[InventoryService] Successfully loaded ItemData module")
else
	warn("[InventoryService] Failed to load ItemData module: " .. tostring(result))
	-- สร้าง ItemData จำลอง
	ItemData = {
		Items = {
			test_item = {
				id = "test_item",
				name = "Test Item",
				description = "A test item",
				type = 1, -- GENERAL
				rarity = 1,
				stackable = true,
				maxStack = 99,
				iconId = "",
				stats = { hp = 50 }
			}
		},
		Equipment = {
			test_equipment = {
				id = "test_equipment",
				name = "Test Equipment",
				description = "A test equipment",
				type = 2, -- EQUIPMENT
				subType = 1, -- WEAPON
				rarity = 2,
				stackable = false,
				iconId = "",
				stats = { attack = 10, defense = 5 }
			}
		},
		GetItemById = function(itemId)
			return ItemData.Items[itemId] or ItemData.Equipment[itemId]
		end
	}
end

-- Create remotes if they don't exist
local remotes = ReplicatedStorage:WaitForChild("Remotes")
local inventoryRemotes = remotes:FindFirstChild("InventoryRemotes")

if not inventoryRemotes then
	inventoryRemotes = Instance.new("Folder")
	inventoryRemotes.Name = "InventoryRemotes"
	inventoryRemotes.Parent = remotes
end

-- Define remotes
local remoteEvents = {
	"UpdateInventory",
	"AddItem",
	"RemoveItem",
	"UseItem",
	"EquipItem",
	"UnequipItem",
	"SortInventory",
	"DropItem",
	"TransferItem",
	"InspectItem",
	"EquipmentSlotClicked"
}

-- Create required RemoteEvents
for _, eventName in ipairs(remoteEvents) do
	if not inventoryRemotes:FindFirstChild(eventName) then
		local event = Instance.new("RemoteEvent")
		event.Name = eventName
		event.Parent = inventoryRemotes
	end
end

-- Player inventory cache
local playerInventories = {}

-- เพิ่มตัวแปรเก็บข้อมูลอุปกรณ์ที่เคยให้ HP แล้ว ตาม player และ itemId
local playerHealedItems = {}

-- Main service
local InventoryService = {}

-- Initialize player inventory
function InventoryService.InitializePlayer(player)
	if playerInventories[player.UserId] then
		return playerInventories[player.UserId]
	end

	local inventory = InventorySystem.new()

	-- ให้ไอเทมเริ่มต้นสำหรับผู้เล่นใหม่
	InventoryService.GiveStartingItems(player, inventory)

	-- Cache the inventory
	playerInventories[player.UserId] = inventory

	-- Send initial inventory data to client
	InventoryService.SendInventoryToClient(player)

	return inventory
end

-- Give starting items to a new player
function InventoryService.GiveStartingItems(player, inventory)
	-- แยกตามคลาสของผู้เล่น (ถ้ามี)
	local playerData = _G.GameManager and _G.GameManager.playerManager:GetPlayerData(player)
	local playerClass = playerData and playerData.class or "Unknown"

	-- ไอเทมพื้นฐานที่ทุกคนได้รับ - ในที่นี้เป็นไอเทมทดสอบ
	inventory:AddItem(ItemData.Items.test_item, 3)

	-- ไอเทมตามคลาส
	if playerClass == "Warrior" or playerClass == "Knight" or playerClass == "Paladin" then
		-- ไอเทมสำหรับสายนักรบ
		inventory:AddItem(ItemData.Equipment.test_equipment)
	elseif playerClass == "Mage" or playerClass == "Wizard" or playerClass == "Archmage" then
		-- ไอเทมสำหรับสายเวทย์
		inventory:AddItem(ItemData.Equipment.test_equipment)
	elseif playerClass == "Thief" or playerClass == "Assassin" or playerClass == "Shadow" then
		-- ไอเทมสำหรับสายโจร
		inventory:AddItem(ItemData.Equipment.test_equipment)
	else
		-- ไอเทมทั่วไป
		inventory:AddItem(ItemData.Equipment.test_equipment)
	end

	print("[InventoryService] Gave starting items to " .. player.Name)
	return true
end

-- Get player inventory
function InventoryService.GetPlayerInventory(player)
	if not playerInventories[player.UserId] then
		return InventoryService.InitializePlayer(player)
	end

	return playerInventories[player.UserId]
end

-- Send inventory data to client
function InventoryService.SendInventoryToClient(player)
	local inventory = InventoryService.GetPlayerInventory(player)
	if not inventory then
		return false
	end

	-- คัดกรองข้อมูลที่จำเป็นสำหรับไคลเอนต์
	local clientData = {
		items = inventory:GetAllItems(),
		equippedItems = inventory:GetEquippedItems(),
		maxSize = inventory.maxSize
	}

	-- ส่งข้อมูลผ่าน Remote
	local updateEvent = inventoryRemotes:WaitForChild("UpdateInventory")
	updateEvent:FireClient(player, clientData)

	return true
end

-- Add item to player inventory
function InventoryService.AddItemToPlayer(player, itemId, quantity)
	local inventory = InventoryService.GetPlayerInventory(player)
	if not inventory then
		return false, "Failed to get player inventory"
	end

	-- หาข้อมูลไอเทม
	local itemData = ItemData.GetItemById(itemId)
	if not itemData then
		return false, "Item not found"
	end

	-- เพิ่มไอเทมลงในคลัง
	local success, message = inventory:AddItem(itemData, quantity)

	-- ส่งข้อมูลอัปเดตไปยังไคลเอนต์
	if success then
		InventoryService.SendInventoryToClient(player)
		print("[InventoryService] Added item " .. itemId .. " x" .. tostring(quantity) .. " to player " .. player.Name)
	end

	return success, message
end

-- Remove item from player inventory
function InventoryService.RemoveItemFromPlayer(player, inventoryId, quantity)
	local inventory = InventoryService.GetPlayerInventory(player)
	if not inventory then
		return false, "Failed to get player inventory"
	end

	-- ค้นหาไอเทมเพื่อล็อกข้อมูล
	local item = inventory:FindItemByInventoryId(inventoryId)
	local itemName = item and item.name or "Unknown Item"

	-- ลบไอเทมออกจากคลัง
	local success, message = inventory:RemoveItem(inventoryId, quantity)

	-- ส่งข้อมูลอัปเดตไปยังไคลเอนต์
	if success then
		InventoryService.SendInventoryToClient(player)
		print("[InventoryService] Removed item " .. itemName .. " from player " .. player.Name)
	end

	return success, message
end

-- Update player stats based on equipment
function InventoryService.UpdatePlayerStats(player, equipmentStats)
	-- ถ้ามีระบบจัดการผู้เล่น ให้อัปเดตสถิติ
	if _G.GameManager and _G.GameManager.playerManager then
		local playerData = _G.GameManager.playerManager:GetPlayerData(player)
		if playerData and playerData.stats then
			-- เก็บสถิติพื้นฐาน
			local baseStats = playerData.baseStats

			-- ตรวจสอบว่ามี baseStats หรือไม่
			if not baseStats then
				print("[InventoryService] Warning: baseStats not found, creating new baseStats...")

				-- สร้าง baseStats จากค่าปัจจุบัน
				baseStats = {
					maxHp = playerData.stats.maxHp,
					hp = playerData.stats.hp,
					maxMp = playerData.stats.maxMp,
					mp = playerData.stats.mp,
					attack = playerData.stats.attack,
					defense = playerData.stats.defense,
					magic = playerData.stats.magic,
					money = playerData.stats.money or 100
				}
				playerData.baseStats = baseStats
			end

			-- ล็อกค่า baseStats และ equipmentStats เพื่อดีบัก
			print("[InventoryService] BaseStats: maxHp=" .. baseStats.maxHp .. 
				", attack=" .. baseStats.attack .. ", defense=" .. baseStats.defense)

			print("[InventoryService] EquipmentStats:")
			for stat, value in pairs(equipmentStats) do
				print("  " .. stat .. " = " .. value)
			end

			-- คำนวณสถิติรวมจากค่าพื้นฐานบวกอุปกรณ์
			for statName, baseValue in pairs(baseStats) do
				if equipmentStats[statName] then
					playerData.stats[statName] = baseValue + equipmentStats[statName]
				else
					playerData.stats[statName] = baseValue
				end
			end

			-- แก้ไข: นำค่า defense จากอุปกรณ์มาเพิ่ม maxHp โดยตรง
			-- ค่า defense 1 จะเพิ่ม maxHp 5 หน่วย
			local defBonus = equipmentStats.defense or 0
			local hpFromDef = defBonus * 5  -- อัตราส่วน: defense 1 = maxHp 5

			print("[InventoryService] Defense Bonus: " .. defBonus .. " (adds " .. hpFromDef .. " to maxHp)")

			-- เพิ่ม MaxHP จาก defense
			playerData.stats.maxHp = baseStats.maxHp + hpFromDef

			-- รับประกันว่า HP ปัจจุบันไม่เกิน maxHp
			playerData.stats.hp = math.min(playerData.stats.hp, playerData.stats.maxHp)

			-- อัปเดตสถิติให้ผู้เล่น
			_G.GameManager.playerManager:UpdatePlayerStats(player)

			print("[InventoryService] Final Stats: maxHp=" .. playerData.stats.maxHp .. 
				", hp=" .. playerData.stats.hp .. ", attack=" .. playerData.stats.attack)
		end
	end

	return true
end

-- อัปเดตสถานะโดยไม่แตะต้อง HP (ใช้เฉพาะสำหรับการใส่อุปกรณ์)
function InventoryService.UpdateStatsWithoutHP(player, equipmentStats)
	-- ถ้ามีระบบจัดการผู้เล่น ให้อัปเดตสถิติ
	if _G.GameManager and _G.GameManager.playerManager then
		local playerData = _G.GameManager.playerManager:GetPlayerData(player)
		if playerData and playerData.stats then
			-- เก็บสถิติพื้นฐาน
			local baseStats = playerData.baseStats

			-- ตรวจสอบว่ามี baseStats หรือไม่
			if not baseStats then
				print("[InventoryService] Warning: baseStats not found, creating new baseStats...")

				-- สร้าง baseStats จากค่าปัจจุบัน
				baseStats = {
					maxHp = playerData.stats.maxHp,
					hp = playerData.stats.hp,
					maxMp = playerData.stats.maxMp,
					mp = playerData.stats.mp,
					attack = playerData.stats.attack,
					defense = playerData.stats.defense,
					magic = playerData.stats.magic,
					money = playerData.stats.money or 100
				}
				playerData.baseStats = baseStats
			end

			-- ล็อกค่า baseStats และ equipmentStats เพื่อดีบัก
			print("[InventoryService] BaseStats: maxHp=" .. baseStats.maxHp .. 
				", attack=" .. baseStats.attack .. ", defense=" .. baseStats.defense)

			-- เก็บค่า HP ปัจจุบันไว้ (เพื่อไม่ให้เปลี่ยนแปลง)
			local currentHP = playerData.stats.hp

			-- คำนวณสถิติรวมจากค่าพื้นฐานบวกอุปกรณ์
			for statName, baseValue in pairs(baseStats) do
				if equipmentStats[statName] then
					playerData.stats[statName] = baseValue + equipmentStats[statName]
				else
					playerData.stats[statName] = baseValue
				end
			end

			-- แก้ไข: นำค่า defense จากอุปกรณ์มาเพิ่ม maxHp โดยตรง
			-- ค่า defense 1 จะเพิ่ม maxHp 5 หน่วย
			local defBonus = equipmentStats.defense or 0
			local hpFromDef = defBonus * 5  -- อัตราส่วน: defense 1 = maxHp 5

			print("[InventoryService] Defense Bonus: " .. defBonus .. " (adds " .. hpFromDef .. " to maxHp)")

			-- เพิ่ม MaxHP จาก defense
			playerData.stats.maxHp = baseStats.maxHp + hpFromDef

			-- ** เก็บค่า HP เดิมไว้ **
			playerData.stats.hp = currentHP

			-- แต่ทำให้แน่ใจว่า HP ไม่เกิน MaxHP
			if playerData.stats.hp > playerData.stats.maxHp then
				playerData.stats.hp = playerData.stats.maxHp
			end

			-- อัปเดตสถิติให้ผู้เล่น (ยกเว้น HP)
			-- ใช้ SyncPlayerStats โดยตรงแทน UpdatePlayerStats
			_G.GameManager.playerManager:SyncPlayerStats(player)

			print("[InventoryService] Stats updated (without changing HP): maxHp=" .. playerData.stats.maxHp .. 
				", hp=" .. playerData.stats.hp .. ", attack=" .. playerData.stats.attack)
		end
	end

	return true
end

-- Handle equipment changes (แก้ไขล่าสุด)
function InventoryService.EquipItemForPlayer(player, inventoryId)
	local inventory = InventoryService.GetPlayerInventory(player)
	if not inventory then
		return false, "Failed to get player inventory"
	end

	-- ค้นหาไอเทมเพื่อล็อกข้อมูล
	local item = inventory:FindItemByInventoryId(inventoryId)
	if not item then
		return false, "Item not found"
	end

	local itemName = item.name or "Unknown Item"
	local itemId = item.id

	-- สวมใส่อุปกรณ์
	local success, message = inventory:EquipItem(inventoryId)

	-- ส่งข้อมูลอัปเดตไปยังไคลเอนต์
	if success then
		-- ดึงข้อมูลผู้เล่น
		local playerData = _G.GameManager and _G.GameManager.playerManager:GetPlayerData(player)
		if playerData then
			-- สร้าง map เก็บข้อมูลอุปกรณ์ที่เคยใช้ฟื้น HP แล้ว
			if not playerHealedItems[player.UserId] then
				playerHealedItems[player.UserId] = {}
			end

			-- อัปเดตสถิติก่อน (รวม MaxHP)
			local equipmentStats = inventory:CalculateEquipmentStats()
			if equipmentStats then
				-- อัปเดตค่าสถิติโดยใช้ฟังก์ชันพิเศษที่ไม่อัปเดต HP
				InventoryService.UpdateStatsWithoutHP(player, equipmentStats)

				-- ตรวจสอบว่าอุปกรณ์ชิ้นนี้เคยใช้ฟื้น HP แล้วหรือไม่
				if not playerHealedItems[player.UserId][itemId] then
					-- ฟื้น HP เต็ม (หลังจากอัปเดต MaxHP แล้ว)
					local fullHP = playerData.stats.maxHp
					playerData.stats.hp = fullHP

					-- อัปเดต HP โดยตรง (ไม่ผ่านฟังก์ชันอัปเดตสถานะอื่น)
					if player.Character and player.Character:FindFirstChild("Humanoid") then
						player.Character.Humanoid.MaxHealth = fullHP
						player.Character.Humanoid.Health = fullHP
					end

					-- อัปเดตให้ client โดยตรง
					if _G.GameManager.playerManager.statChangedEvent then
						_G.GameManager.playerManager.statChangedEvent:FireClient(player, {
							hp = {
								oldValue = playerData.stats.hp,
								newValue = fullHP
							}
						})
					end

					-- บันทึกว่าอุปกรณ์ชิ้นนี้ได้ใช้ฟื้น HP แล้ว
					playerHealedItems[player.UserId][itemId] = true

					print("[InventoryService] Full HP restore from equipping new item: " .. itemId .. " (HP = " .. fullHP .. "/" .. playerData.stats.maxHp .. ")")

					-- เรียกใช้ SyncPlayerStats (แต่ไม่ผ่าน UpdatePlayerHP)
					_G.GameManager.playerManager:SyncPlayerStats(player)
				else
					print("[InventoryService] Item already used for HP restore before: " .. itemId)
				end
			end
		else
			-- ไม่พบข้อมูลผู้เล่น ให้อัปเดตค่าสถิติตามปกติ
			local equipmentStats = inventory:CalculateEquipmentStats()
			if equipmentStats then
				InventoryService.UpdatePlayerStats(player, equipmentStats)
			end
		end

		-- ส่งข้อมูลอุปกรณ์ไปยังไคลเอนต์
		InventoryService.SendInventoryToClient(player)

		print("[InventoryService] Player " .. player.Name .. " equipped " .. itemName)
	end

	return success, message
end

-- Handle unequipping items
function InventoryService.UnequipItemForPlayer(player, slotType)
	local inventory = InventoryService.GetPlayerInventory(player)
	if not inventory then
		return false, "Failed to get player inventory"
	end

	-- ดึงอุปกรณ์ที่สวมใส่อยู่ในช่องนี้
	local equippedItem = inventory:GetEquippedItemInSlot(slotType)
	if not equippedItem then
		return false, "No item equipped in this slot"
	end

	-- ถอดอุปกรณ์
	local success, message = inventory:UnequipItem(slotType)

	-- ส่งข้อมูลอัปเดตไปยังไคลเอนต์
	if success then
		InventoryService.SendInventoryToClient(player)

		-- อัปเดตสถิติของผู้เล่น (ไม่ฟื้น HP)
		local equipmentStats = inventory:CalculateEquipmentStats()
		InventoryService.UpdatePlayerStats(player, equipmentStats)

		print("[InventoryService] Player " .. player.Name .. " unequipped item from slot " .. tostring(slotType))
	end

	return success, message
end

-- Handle equipment slot clicks
function InventoryService.HandleEquipmentSlotClick(player, slotType)
	local inventory = InventoryService.GetPlayerInventory(player)
	if not inventory then
		return false, "Failed to get player inventory"
	end

	-- ตรวจสอบว่ามีอุปกรณ์ในช่องนี้หรือไม่
	local item = inventory:GetEquippedItemInSlot(slotType)
	if not item then
		return false, "No item equipped in this slot"
	end

	-- ส่งข้อมูลของอุปกรณ์ไปแสดงในหน้ารายละเอียดไอเทม
	local inspectEvent = inventoryRemotes:WaitForChild("InspectItem")
	inspectEvent:FireClient(player, item)

	return true, "Equipment inspection successful"
end

-- Handle using items
function InventoryService.UseItemForPlayer(player, inventoryId)
	local inventory = InventoryService.GetPlayerInventory(player)
	if not inventory then
		return false, "Failed to get player inventory"
	end

	-- หาข้อมูลไอเทม
	local item = inventory:FindItemByInventoryId(inventoryId)
	if not item then
		return false, "Item not found"
	end

	local itemName = item.name or "Unknown Item"
	local itemId = item.id

	-- ตรวจสอบว่าใช้ได้หรือไม่
	if not item.usable then
		return false, "Item cannot be used"
	end

	-- กำหนดฟังก์ชั่นการใช้งาน (จากอีเวนต์สคริปต์หรือระบบอื่น)
	local useFunction

	-- เช็คว่ามีฟังก์ชั่นการใช้งานพิเศษหรือไม่
	if ItemData.UseHandlers and ItemData.UseHandlers[item.id] then
		useFunction = function(itemData)
			return ItemData.UseHandlers[item.id](player, itemData)
		end
	else
		-- ฟังก์ชั่นการใช้งานทั่วไป
		useFunction = function(itemData)
			-- เช็คประเภทไอเทม
			if itemData.type == InventorySystem.GetItemTypes().GENERAL then
				-- ถ้าเป็นไอเทมทั่วไป เช่น โพชั่น
				if itemData.stats then
					-- ผลต่อสถิติผู้เล่น
					local playerData = _G.GameManager and _G.GameManager.playerManager:GetPlayerData(player)
					if playerData and playerData.stats then
						local changed = false

						-- เพิ่มค่าสถิติตามไอเทม
						for statName, statValue in pairs(itemData.stats) do
							if playerData.stats[statName] ~= nil then
								playerData.stats[statName] = playerData.stats[statName] + statValue
								changed = true
							end
						end

						-- ถ้าไอเทมมีผลต่อ HP ให้ล้างประวัติการฟื้น HP ของอุปกรณ์ (หากมี)
						if itemData.stats.hp and playerHealedItems[player.UserId] then
							-- รีเซ็ตประวัติการฟื้น HP สำหรับทุกอุปกรณ์
							playerHealedItems[player.UserId] = {}
							print("[InventoryService] Reset healing history after using healing item")
						end

						-- อัปเดตสถิติถ้ามีการเปลี่ยนแปลง
						if changed then
							if _G.GameManager then
								_G.GameManager.playerManager:UpdatePlayerStats(player)
							end

							-- ส่งข้อความยืนยัน
							return true, "Used " .. itemData.name
						end
					end
				end
			elseif itemData.type == InventorySystem.GetItemTypes().SKILL then
				-- ถ้าเป็นคัมภีร์สกิล
				local skillId = itemData.skillId
				if skillId then
					-- เรียกใช้ระบบสกิล (ต้องมีระบบสกิลก่อน)
					if _G.GameManager and _G.GameManager.skillSystem then
						local success = _G.GameManager.skillSystem:LearnSkill(player, skillId)
						if success then
							return true, "Learned new skill: " .. (itemData.skillName or "Unknown Skill")
						else
							return false, "Could not learn this skill"
						end
					end
				end
			end

			return true, "Used " .. itemData.name
		end
	end

	-- กำหนดฟังก์ชั่นการใช้งาน
	item.useFunction = useFunction

	-- ใช้ไอเทม
	local success, message = inventory:UseItem(inventoryId)

	-- ส่งข้อมูลอัปเดตไปยังไคลเอนต์
	if success then
		InventoryService.SendInventoryToClient(player)
		print("[InventoryService] Player " .. player.Name .. " used " .. itemName)
	end

	return success, message
end

-- เพิ่มฟังก์ชัน Reset HP Healing History เมื่อผู้เล่นตาย หรือจบเกม
function InventoryService.ResetHealingHistory(player)
	if player and player.UserId and playerHealedItems[player.UserId] then
		playerHealedItems[player.UserId] = {}
		print("[InventoryService] Reset healing history for player: " .. player.Name)
	end
end

-- เพิ่มฟังก์ชัน Reset HP Healing History สำหรับไอเทมเฉพาะ
function InventoryService.ResetItemHealingHistory(player, itemId)
	if player and player.UserId and playerHealedItems[player.UserId] and itemId then
		playerHealedItems[player.UserId][itemId] = nil
		print("[InventoryService] Reset healing history for item: " .. itemId)
	end
end

-- เพิ่มฟังก์ชัน Reset HP Healing History สำหรับทุกผู้เล่น
function InventoryService.ResetAllHealingHistory()
	playerHealedItems = {}
	print("[InventoryService] Reset healing history for all players")
end

-- Connect remote events
local function setupRemoteEvents()
	-- Add Item
	local addItemEvent = inventoryRemotes:WaitForChild("AddItem")
	addItemEvent.OnServerEvent:Connect(function(player, itemId, quantity)
		-- สำหรับการทดสอบ เปิดให้ผู้เล่นเพิ่มไอเทมเอง
		InventoryService.AddItemToPlayer(player, itemId, quantity)
	end)

	-- Remove Item
	local removeItemEvent = inventoryRemotes:WaitForChild("RemoveItem")
	removeItemEvent.OnServerEvent:Connect(function(player, inventoryId, quantity)
		InventoryService.RemoveItemFromPlayer(player, inventoryId, quantity)
	end)

	-- Equip Item
	local equipItemEvent = inventoryRemotes:WaitForChild("EquipItem")
	equipItemEvent.OnServerEvent:Connect(function(player, inventoryId)
		InventoryService.EquipItemForPlayer(player, inventoryId)
	end)

	-- Unequip Item
	local unequipItemEvent = inventoryRemotes:WaitForChild("UnequipItem")
	unequipItemEvent.OnServerEvent:Connect(function(player, slotType)
		InventoryService.UnequipItemForPlayer(player, slotType)
	end)

	-- Use Item
	local useItemEvent = inventoryRemotes:WaitForChild("UseItem")
	useItemEvent.OnServerEvent:Connect(function(player, inventoryId)
		InventoryService.UseItemForPlayer(player, inventoryId)
	end)

	-- Equipment Slot Clicked
	local slotClickEvent = inventoryRemotes:WaitForChild("EquipmentSlotClicked")
	slotClickEvent.OnServerEvent:Connect(function(player, slotType)
		InventoryService.HandleEquipmentSlotClick(player, slotType)
	end)

	-- Drop Item (อาจจะเพิ่มระบบวางไอเทมบนกระดาน)
	local dropItemEvent = inventoryRemotes:WaitForChild("DropItem")
	dropItemEvent.OnServerEvent:Connect(function(player, inventoryId, quantity)
		-- ไว้เพิ่มเติมในอนาคต
	end)

	-- Inspect Item (ดูรายละเอียดไอเทม)
	local inspectItemEvent = inventoryRemotes:WaitForChild("InspectItem")
	inspectItemEvent.OnServerEvent:Connect(function(player, inventoryId)
		local inventory = InventoryService.GetPlayerInventory(player)
		if not inventory then return end

		local item = inventory:FindItemByInventoryId(inventoryId)
		if item then
			-- ส่งข้อมูลไอเทมไปแสดงในหน้าต่างรายละเอียด
			inspectItemEvent:FireClient(player, item)
		end
	end)
end

-- Set up player events
local function setupPlayerEvents()
	-- Player joining
	Players.PlayerAdded:Connect(function(player)
		-- Initialize inventory when player joins
		InventoryService.InitializePlayer(player)
	end)

	-- Player leaving
	Players.PlayerRemoving:Connect(function(player)
		-- Clear from cache
		playerInventories[player.UserId] = nil

		-- รีเซ็ตประวัติการฟื้น HP เมื่อผู้เล่นออก
		if playerHealedItems[player.UserId] then
			playerHealedItems[player.UserId] = nil
		end
	end)

	-- Initialize for existing players
	for _, player in pairs(Players:GetPlayers()) do
		task.spawn(function()
			InventoryService.InitializePlayer(player)
		end)
	end
end

-- เชื่อมต่อกับเหตุการณ์เมื่อผู้เล่นตาย (hook เข้ากับ PlayerManager)
local function setupDeathHook()
	-- ตรวจสอบว่ามี PlayerManager หรือไม่
	if _G.GameManager and _G.GameManager.playerManager then
		local playerManager = _G.GameManager.playerManager

		-- ดักฟังเหตุการณ์ HandlePlayerDeath (ถ้ารองรับ)
		if playerManager.OnPlayerDeath then
			-- เชื่อมต่อกับ event
			playerManager.OnPlayerDeath:Connect(function(player)
				-- รีเซ็ตประวัติการฟื้น HP
				InventoryService.ResetHealingHistory(player)
			end)
		end

		-- Alternative: Hook เข้าไปใน HandlePlayerDeath โดยตรง
		if typeof(playerManager.HandlePlayerDeath) == "function" then
			-- เก็บฟังก์ชันเดิม
			local originalHandlePlayerDeath = playerManager.HandlePlayerDeath

			-- แทนที่ด้วยฟังก์ชันใหม่
			playerManager.HandlePlayerDeath = function(self, player)
				-- เรียกฟังก์ชันเดิมก่อน
				originalHandlePlayerDeath(self, player)

				-- รีเซ็ตประวัติการฟื้น HP
				InventoryService.ResetHealingHistory(player)
			end

			print("[InventoryService] Successfully hooked into PlayerManager.HandlePlayerDeath")
		end
	end
end

-- Initialize the service
local function init()
	print("Initializing InventoryService...")

	-- ลงทะเบียนกับ GameManager ถ้ามี
	if _G.GameManager then
		_G.GameManager.inventoryService = InventoryService
		print("InventoryService registered with GameManager")
	end

	-- เชื่อมต่อกับ Remote Events
	setupRemoteEvents()

	-- เชื่อมต่อกับ Player Events
	setupPlayerEvents()

	-- เชื่อมต่อกับเหตุการณ์ผู้เล่นตาย
	setupDeathHook()

	print("InventoryService initialized successfully")
end

-- Start the initialization
init()

return InventoryService
