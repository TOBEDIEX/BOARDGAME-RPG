-- InventoryService.server.lua
-- บริการจัดการระบบ Inventory ฝั่งเซิร์ฟเวอร์ (อัพเดตสำหรับ DiceBonus)
-- Version: 3.4.0

-- Services
local ServerStorage = game:GetService("ServerStorage")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")

-- Load dependencies
local Modules = ServerStorage:WaitForChild("Modules")
local InventorySystem = require(Modules:WaitForChild("InventorySystem"))
local ItemData

-- ใช้ pcall ในการโหลด ItemData เพื่อป้องกันความผิดพลาด
local success, result = pcall(function()
	return require(ReplicatedStorage:FindFirstChild("SharedModules"):WaitForChild("ItemData"))
end)

if success then
	ItemData = result
	print("[InventoryService] Successfully loaded ItemData module")
else
	warn("[InventoryService] Failed to load ItemData module: " .. tostring(result))
	-- สร้าง ItemData จำลอง
	ItemData = {
		Items = {
			test_item = {
				id = "test_item",
				name = "Test Item",
				description = "A test item",
				type = 1, -- GENERAL
				rarity = 1,
				stackable = true,
				maxStack = 99,
				iconId = "",
				stats = { hp = 50 }
			},
			-- เพิ่มไอเทม DiceBonus
			dice_bonus_1 = {
				id = "dice_bonus_1",
				name = "Lucky Dice +1",
				description = "เพิ่มแต้มลูกเต๋า +1 ในเทิร์นถัดไป 1 ครั้ง",
				type = 1, -- GENERAL
				rarity = 2,
				stackable = true,
				maxStack = 5,
				usable = true,
				consumable = true,
				stats = { diceRollBonus = 1 }
			}
		},
		Equipment = {
			test_equipment = {
				id = "test_equipment",
				name = "Test Equipment",
				description = "A test equipment",
				type = 2, -- EQUIPMENT
				subType = 1, -- WEAPON
				rarity = 2,
				stackable = false,
				iconId = "",
				stats = { attack = 10, defense = 5 }
			}
		},
		GetItemById = function(itemId)
			return ItemData.Items[itemId] or ItemData.Equipment[itemId]
	end
	}
	end

	-- Create remotes if they don't exist
local remotes = ReplicatedStorage:WaitForChild("Remotes")
local inventoryRemotes = remotes:FindFirstChild("InventoryRemotes")

if not inventoryRemotes then
	inventoryRemotes = Instance.new("Folder")
	inventoryRemotes.Name = "InventoryRemotes"
	inventoryRemotes.Parent = remotes
end

-- Define remotes
local remoteEvents = {
	"UpdateInventory",
	"AddItem",
	"RemoveItem",
	"UseItem",
	"EquipItem",
	"UnequipItem",
	"SortInventory",
	"DropItem",
	"TransferItem",
	"InspectItem",
	"EquipmentSlotClicked",
	"DiceBonus" -- เพิ่ม Remote สำหรับ DiceBonus
}

-- Create required RemoteEvents
for _, eventName in ipairs(remoteEvents) do
	if not inventoryRemotes:FindFirstChild(eventName) then
		local event = Instance.new("RemoteEvent")
		event.Name = eventName
		event.Parent = inventoryRemotes
	end
end

-- Player inventory cache
local playerInventories = {}

-- เพิ่มตัวแปรเก็บข้อมูลอุปกรณ์ที่เคยให้ HP แล้ว ตาม player และ itemId
local playerHealedItems = {}

-- เพิ่มตัวแปรเก็บข้อมูลการใช้ไอเทม DiceBonus ตาม player
local playerDiceBonusUses = {}

-- ฟังก์ชันดึง DiceBonusService
local function getDiceBonusService()
	if _G.DiceBonusService then
		return _G.DiceBonusService
	end

	if _G.GameManager and _G.GameManager.diceBonusService then
		return _G.GameManager.diceBonusService
	end

	return nil
end

-- Main service
local InventoryService = {}

-- Initialize player inventory
function InventoryService.InitializePlayer(player)
	if playerInventories[player.UserId] then
		return playerInventories[player.UserId]
	end

	local inventory = InventorySystem.new()

	-- ให้ไอเทมเริ่มต้นสำหรับผู้เล่นใหม่
	InventoryService.GiveStartingItems(player, inventory)

	-- Cache the inventory
	playerInventories[player.UserId] = inventory

	-- Send initial inventory data to client
	InventoryService.SendInventoryToClient(player)

	return inventory
end

-- Give starting items to a new player
function InventoryService.GiveStartingItems(player, inventory)
	-- แยกตามคลาสของผู้เล่น (ถ้ามี)
	local playerData = _G.GameManager and _G.GameManager.playerManager:GetPlayerData(player)
	local playerClass = playerData and playerData.class or "Unknown"

	-- ไอเทมพื้นฐานที่ทุกคนได้รับ
	inventory:AddItem(ItemData.Items.test_item, 3)

	-- เพิ่มไอเทม DiceBonus สำหรับทดสอบ
	if ItemData.Items.dice_bonus_1 then
		inventory:AddItem(ItemData.Items.dice_bonus_1, 2)
	end

	if ItemData.Items.dice_bonus_2 then
		inventory:AddItem(ItemData.Items.dice_bonus_2, 1)
	end

	-- ไอเทมตามคลาส
	if playerClass == "Warrior" or playerClass == "Knight" or playerClass == "Paladin" then
		-- ไอเทมสำหรับสายนักรบ
		inventory:AddItem(ItemData.Equipment.test_equipment)
	elseif playerClass == "Mage" or playerClass == "Wizard" or playerClass == "Archmage" then
		-- ไอเทมสำหรับสายเวทย์
		inventory:AddItem(ItemData.Equipment.test_equipment)
	elseif playerClass == "Thief" or playerClass == "Assassin" or playerClass == "Shadow" then
		-- ไอเทมสำหรับสายโจร
		inventory:AddItem(ItemData.Equipment.test_equipment)
	else
		-- ไอเทมทั่วไป
		inventory:AddItem(ItemData.Equipment.test_equipment)
	end

	print("[InventoryService] Gave starting items to " .. player.Name)
	return true
end

-- Get player inventory
function InventoryService.GetPlayerInventory(player)
	if not playerInventories[player.UserId] then
		return InventoryService.InitializePlayer(player)
	end

	return playerInventories[player.UserId]
end

-- Send inventory data to client
function InventoryService.SendInventoryToClient(player)
	local inventory = InventoryService.GetPlayerInventory(player)
	if not inventory then
		return false
	end

	-- คัดกรองข้อมูลที่จำเป็นสำหรับไคลเอนต์
	local clientData = {
		items = inventory:GetAllItems(),
		equippedItems = inventory:GetEquippedItems(),
		maxSize = inventory.maxSize
	}

	-- ส่งข้อมูลผ่าน Remote
	local updateEvent = inventoryRemotes:WaitForChild("UpdateInventory")
	updateEvent:FireClient(player, clientData)

	return true
end

-- Add item to player inventory
function InventoryService.AddItemToPlayer(player, itemId, quantity)
	local inventory = InventoryService.GetPlayerInventory(player)
	if not inventory then
		return false, "Failed to get player inventory"
	end

	-- หาข้อมูลไอเทม
	local itemData = ItemData.GetItemById(itemId)
	if not itemData then
		return false, "Item not found"
	end

	-- เพิ่มไอเทมลงในคลัง
	local success, message = inventory:AddItem(itemData, quantity)

	-- ส่งข้อมูลอัปเดตไปยังไคลเอนต์
	if success then
		InventoryService.SendInventoryToClient(player)
		print("[InventoryService] Added item " .. itemId .. " x" .. tostring(quantity) .. " to player " .. player.Name)
	end

	return success, message
end

-- Remove item from player inventory
function InventoryService.RemoveItemFromPlayer(player, inventoryId, quantity)
	local inventory = InventoryService.GetPlayerInventory(player)
	if not inventory then
		return false, "Failed to get player inventory"
	end

	-- ค้นหาไอเทมเพื่อล็อกข้อมูล
	local item = inventory:FindItemByInventoryId(inventoryId)
	local itemName = item and item.name or "Unknown Item"

	-- ลบไอเทมออกจากคลัง
	local success, message = inventory:RemoveItem(inventoryId, quantity)

	-- ส่งข้อมูลอัปเดตไปยังไคลเอนต์
	if success then
		InventoryService.SendInventoryToClient(player)
		print("[InventoryService] Removed item " .. itemName .. " from player " .. player.Name)
	end

	return success, message
end

-- Update player stats based on equipment
function InventoryService.UpdatePlayerStats(player, equipmentStats)
	-- ถ้ามีระบบจัดการผู้เล่น ให้อัปเดตสถิติ
	if _G.GameManager and _G.GameManager.playerManager then
		local playerData = _G.GameManager.playerManager:GetPlayerData(player)
		if playerData and playerData.stats then
			-- เก็บสถิติพื้นฐาน
			local baseStats = playerData.baseStats

			-- ตรวจสอบว่ามี baseStats หรือไม่
			if not baseStats then
				print("[InventoryService] Warning: baseStats not found, creating new baseStats...")

				-- สร้าง baseStats จากค่าปัจจุบัน
				baseStats = {
					maxHp = playerData.stats.maxHp,
					hp = playerData.stats.hp,
					maxMp = playerData.stats.maxMp,
					mp = playerData.stats.mp,
					attack = playerData.stats.attack,
					defense = playerData.stats.defense,
					magic = playerData.stats.magic,
					money = playerData.stats.money or 100
				}
				playerData.baseStats = baseStats
			end

			-- ล็อกค่า baseStats และ equipmentStats เพื่อดีบัก
			print("[InventoryService] BaseStats: maxHp=" .. baseStats.maxHp .. 
				", attack=" .. baseStats.attack .. ", defense=" .. baseStats.defense)

			print("[InventoryService] EquipmentStats:")
			for stat, value in pairs(equipmentStats) do
				print("  " .. stat .. " = " .. value)
			end

			-- คำนวณสถิติรวมจากค่าพื้นฐานบวกอุปกรณ์
			for statName, baseValue in pairs(baseStats) do
				if equipmentStats[statName] then
					playerData.stats[statName] = baseValue + equipmentStats[statName]
				else
					playerData.stats[statName] = baseValue
				end
			end

			-- แก้ไข: นำค่า defense จากอุปกรณ์มาเพิ่ม maxHp โดยตรง
			-- ค่า defense 1 จะเพิ่ม maxHp 5 หน่วย
			local defBonus = equipmentStats.defense or 0
			local hpFromDef = defBonus * 5  -- อัตราส่วน: defense 1 = maxHp 5

			print("[InventoryService] Defense Bonus: " .. defBonus .. " (adds " .. hpFromDef .. " to maxHp)")

			-- เพิ่ม MaxHP จาก defense
			playerData.stats.maxHp = baseStats.maxHp + hpFromDef

			-- รับประกันว่า HP ปัจจุบันไม่เกิน maxHp
			playerData.stats.hp = math.min(playerData.stats.hp, playerData.stats.maxHp)

			-- อัปเดตสถิติให้ผู้เล่น
			_G.GameManager.playerManager:UpdatePlayerStats(player)

			print("[InventoryService] Final Stats: maxHp=" .. playerData.stats.maxHp .. 
				", hp=" .. playerData.stats.hp .. ", attack=" .. playerData.stats.attack)
		end
	end

	return true
end

-- Handle using items (แก้ไขให้รองรับ DiceBonus)
function InventoryService.UseItemForPlayer(player, inventoryId)
	local inventory = InventoryService.GetPlayerInventory(player)
	if not inventory then
		return false, "Failed to get player inventory"
	end

	-- หาข้อมูลไอเทม
	local item = inventory:FindItemByInventoryId(inventoryId)
	if not item then
		return false, "Item not found"
	end

	local itemName = item.name or "Unknown Item"
	local itemId = item.id

	-- ตรวจสอบว่าใช้ได้หรือไม่
	if not item.usable then
		return false, "Item cannot be used"
	end

	-- เช็คว่าเป็นไอเทม DiceBonus หรือไม่
	local isDiceBonus = item.stats and item.stats.diceRollBonus and item.stats.diceRollBonus > 0

	if isDiceBonus then
		-- ตรวจสอบว่าเป็นเทิร์นของผู้เล่นหรือไม่
		local turnSystem = _G.GameManager and _G.GameManager.turnSystem
		if not turnSystem then
			return false, "Turn system not available"
		end

		if turnSystem:GetCurrentPlayerTurn() ~= player.UserId then
			return false, "You can only use this item during your turn"
		end

		-- ตรวจสอบว่าใช้ไอเทม DiceBonus ไปแล้วในเทิร์นนี้หรือไม่
		if playerDiceBonusUses[player.UserId] then
			return false, "You already used a dice bonus item this turn"
		end
	end

	-- กำหนดฟังก์ชั่นการใช้งาน (จากอีเวนต์สคริปต์หรือระบบอื่น)
	local useFunction

	-- เช็คว่ามีฟังก์ชั่นการใช้งานพิเศษหรือไม่
	if ItemData.UseHandlers and ItemData.UseHandlers[item.id] then
		useFunction = function(itemData)
			return ItemData.UseHandlers[item.id](player, itemData)
		end
	else
		-- ฟังก์ชั่นการใช้งานทั่วไป
		useFunction = function(itemData)
			-- เช็คประเภทไอเทม
			if itemData.type == InventorySystem.GetItemTypes().GENERAL then
				-- ถ้าเป็นไอเทมทั่วไป เช่น โพชั่น
				if itemData.stats then
					-- ผลต่อสถิติผู้เล่น
					local playerData = _G.GameManager and _G.GameManager.playerManager:GetPlayerData(player)
					if playerData and playerData.stats then
						local changed = false

						-- เพิ่มค่าสถิติตามไอเทม
						for statName, statValue in pairs(itemData.stats) do
							if statName == "diceRollBonus" then
								-- จัดการโบนัสลูกเต๋า
								local diceBonusService = getDiceBonusService()
								if diceBonusService then
									diceBonusService.SetPlayerDiceBonus(player, statValue)
									changed = true

									-- บันทึกว่าได้ใช้ไอเทม DiceBonus ในเทิร์นนี้แล้ว
									playerDiceBonusUses[player.UserId] = {
										itemId = itemId,
										bonusAmount = statValue,
										timestamp = os.time()
									}

									print("[InventoryService] Player " .. player.Name .. " used dice bonus +" .. statValue)
								else
									warn("[InventoryService] Cannot find DiceBonusService to apply bonus")
								end
							elseif playerData.stats[statName] ~= nil then
								playerData.stats[statName] = playerData.stats[statName] + statValue
								changed = true
							end
						end

						-- ถ้าไอเทมมีผลต่อ HP ให้ล้างประวัติการฟื้น HP ของอุปกรณ์ (หากมี)
						if itemData.stats.hp and playerHealedItems[player.UserId] then
							-- รีเซ็ตประวัติการฟื้น HP สำหรับทุกอุปกรณ์
							playerHealedItems[player.UserId] = {}
							print("[InventoryService] Reset healing history after using healing item")

							-- ใช้เทคนิค delay เพื่อให้แน่ใจว่า HP จะไม่ถูกรีเซ็ตหลังจากใช้ไอเทม
							task.delay(0.1, function()
								-- ฟื้น HP ตามปกติด้วยฟังก์ชันของเรา (ไม่ใช้ UpdatePlayerStats)
								if _G.GameManager and playerData then
									local newHP = math.min(playerData.stats.hp, playerData.stats.maxHp)
									print("[InventoryService] Ensuring HP is correct after item use: " .. newHP)

									-- อัปเดต HP โดยตรง (ไม่ผ่านฟังก์ชันอัปเดตสถานะอื่น)
									if player.Character and player.Character:FindFirstChild("Humanoid") then
										player.Character.Humanoid.Health = newHP
									end

									-- อัปเดตให้ client โดยตรง
									if _G.GameManager.playerManager.updatePlayerStatsEvent then
										local statsToSync = {
											hp = newHP,
											maxHp = playerData.stats.maxHp,
											mp = playerData.stats.mp,
											maxMp = playerData.stats.maxMp,
											attack = playerData.stats.attack,
											defense = playerData.stats.defense,
											magic = playerData.stats.magic,
											level = playerData.stats.level or 1,
											class = playerData.class,
											money = playerData.stats.money
										}

										_G.GameManager.playerManager.updatePlayerStatsEvent:FireClient(
											player, 
											player.UserId, 
											statsToSync
										)
									end
								end
							end)
						end

						-- อัปเดตสถิติถ้ามีการเปลี่ยนแปลง (ไม่ต้องอัปเดต DiceBonus)
						if changed and not isDiceBonus then
							-- ใช้ ForceHealToFull ถ้าเป็นไอเทมฟื้น HP
							if itemData.stats.hp and itemData.stats.hp > 0 then
								task.delay(0.05, function()
									InventoryService.ForceHealToFull(player)
								end)
							else
								if _G.GameManager then
									_G.GameManager.playerManager:UpdatePlayerStats(player)
								end
							end
						end

						-- ส่งข้อความยืนยัน
						return true, "Used " .. itemData.name
					end
				end
			elseif itemData.type == InventorySystem.GetItemTypes().SKILL then
				-- ถ้าเป็นคัมภีร์สกิล
				local skillId = itemData.skillId
				if skillId then
					-- เรียกใช้ระบบสกิล (ต้องมีระบบสกิลก่อน)
					if _G.GameManager and _G.GameManager.skillSystem then
						local success = _G.GameManager.skillSystem:LearnSkill(player, skillId)
						if success then
							return true, "Learned new skill: " .. (itemData.skillName or "Unknown Skill")
						else
							return false, "Could not learn this skill"
						end
					end
				end
			end

			return true, "Used " .. itemData.name
		end
	end

	-- กำหนดฟังก์ชั่นการใช้งาน
	item.useFunction = useFunction

	-- ใช้ไอเทม
	local success, message = inventory:UseItem(inventoryId)

	-- ส่งข้อมูลอัปเดตไปยังไคลเอนต์
	if success then
		InventoryService.SendInventoryToClient(player)
		print("[InventoryService] Player " .. player.Name .. " used " .. itemName)
	end

	return success, message
end

-- ฟังก์ชันเพิ่ม: รีเซ็ตการใช้ไอเทม DiceBonus
function InventoryService.ResetDiceBonusUse(player)
	if not player then return false end

	local playerId = typeof(player) == "number" and player or player.UserId

	if playerDiceBonusUses[playerId] then
		playerDiceBonusUses[playerId] = nil
		print("[InventoryService] Reset dice bonus use for player: " .. playerId)
		return true
	end

	return false
end

-- Connect remote events
local function setupRemoteEvents()
	-- Add Item
	local addItemEvent = inventoryRemotes:WaitForChild("AddItem")
	addItemEvent.OnServerEvent:Connect(function(player, itemId, quantity)
		-- สำหรับการทดสอบ เปิดให้ผู้เล่นเพิ่มไอเทมเอง
		InventoryService.AddItemToPlayer(player, itemId, quantity)
	end)

	-- Remove Item
	local removeItemEvent = inventoryRemotes:WaitForChild("RemoveItem")
	removeItemEvent.OnServerEvent:Connect(function(player, inventoryId, quantity)
		InventoryService.RemoveItemFromPlayer(player, inventoryId, quantity)
	end)

	-- Equip Item
	local equipItemEvent = inventoryRemotes:WaitForChild("EquipItem")
	equipItemEvent.OnServerEvent:Connect(function(player, inventoryId)
		InventoryService.EquipItemForPlayer(player, inventoryId)
	end)

	-- Unequip Item
	local unequipItemEvent = inventoryRemotes:WaitForChild("UnequipItem")
	unequipItemEvent.OnServerEvent:Connect(function(player, slotType)
		InventoryService.UnequipItemForPlayer(player, slotType)
	end)

	-- Use Item
	local useItemEvent = inventoryRemotes:WaitForChild("UseItem")
	useItemEvent.OnServerEvent:Connect(function(player, inventoryId)
		InventoryService.UseItemForPlayer(player, inventoryId)
	end)

	-- Equipment Slot Clicked
	local slotClickEvent = inventoryRemotes:WaitForChild("EquipmentSlotClicked")
	slotClickEvent.OnServerEvent:Connect(function(player, slotType)
		InventoryService.HandleEquipmentSlotClick(player, slotType)
	end)

	-- Drop Item (อาจจะเพิ่มระบบวางไอเทมบนกระดาน)
	local dropItemEvent = inventoryRemotes:WaitForChild("DropItem")
	dropItemEvent.OnServerEvent:Connect(function(player, inventoryId, quantity)
		-- ไว้เพิ่มเติมในอนาคต
	end)

	-- Inspect Item (ดูรายละเอียดไอเทม)
	local inspectItemEvent = inventoryRemotes:WaitForChild("InspectItem")
	inspectItemEvent.OnServerEvent:Connect(function(player, inventoryId)
		local inventory = InventoryService.GetPlayerInventory(player)
		if not inventory then return end

		local item = inventory:FindItemByInventoryId(inventoryId)
		if item then
			-- ส่งข้อมูลไอเทมไปแสดงในหน้าต่างรายละเอียด
			inspectItemEvent:FireClient(player, item)
		end
	end)
end

-- Set up player events
local function setupPlayerEvents()
	-- Player joining
	Players.PlayerAdded:Connect(function(player)
		-- Initialize inventory when player joins
		InventoryService.InitializePlayer(player)
	end)

	-- Player leaving
	Players.PlayerRemoving:Connect(function(player)
		-- Clear from cache
		playerInventories[player.UserId] = nil

		-- รีเซ็ตประวัติการฟื้น HP เมื่อผู้เล่นออก
		if playerHealedItems[player.UserId] then
			playerHealedItems[player.UserId] = nil
		end

		-- รีเซ็ตข้อมูลการใช้ไอเทม DiceBonus
		if playerDiceBonusUses[player.UserId] then
			playerDiceBonusUses[player.UserId] = nil
		end
	end)

	-- Initialize for existing players
	for _, player in pairs(Players:GetPlayers()) do
		task.spawn(function()
			InventoryService.InitializePlayer(player)
		end)
	end

	-- เชื่อมต่อกับระบบเทิร์น
	local remotes = ReplicatedStorage:WaitForChild("Remotes")
	local gameRemotes = remotes:WaitForChild("GameRemotes", 10)

	if gameRemotes then
		local updateTurnEvent = gameRemotes:WaitForChild("UpdateTurn", 10)
		if updateTurnEvent then
			updateTurnEvent.OnServerEvent:Connect(function(_, playerId)
				-- รีเซ็ตการใช้ไอเทม DiceBonus สำหรับเทิร์นใหม่
				for pid, _ in pairs(playerDiceBonusUses) do
					if pid ~= playerId then
						playerDiceBonusUses[pid] = nil
						print("[InventoryService] Reset dice bonus use for player " .. pid .. " on turn change")
					end
				end
			end)
		end
	end
end

-- Initialize the service
local function init()
	print("Initializing InventoryService...")

	-- ลงทะเบียนกับ GameManager ถ้ามี
	if _G.GameManager then
		_G.GameManager.inventoryService = InventoryService
		print("InventoryService registered with GameManager")
	end

	-- เชื่อมต่อกับ Remote Events
	setupRemoteEvents()

	-- เชื่อมต่อกับ Player Events
	setupPlayerEvents()

	print("InventoryService initialized successfully")

	-- เพิ่มฟังก์ชันทดสอบโบนัสลูกเต๋าให้กับ _G
	_G.TestDiceBonus = function(player, bonusAmount)
		-- ถ้าไม่ระบุผู้เล่น ใช้ผู้เล่นแรกในเซิร์ฟเวอร์
		if not player then
			local players = Players:GetPlayers()
			if #players == 0 then 
				warn("[InventoryService] ไม่มีผู้เล่นในเกม")
				return false 
			end
			player = players[1]
		end

		bonusAmount = bonusAmount or 1

		-- ตรวจสอบว่าเป็นเทิร์นของผู้เล่นหรือไม่
		local turnSystem = _G.GameManager and _G.GameManager.turnSystem
		if turnSystem and turnSystem:GetCurrentPlayerTurn() ~= player.UserId then
			warn("[InventoryService] ไม่ใช่เทิร์นของผู้เล่น " .. player.Name)
			return false
		end

		-- ตั้งค่าโบนัสลูกเต๋า
		local diceBonusService = getDiceBonusService()
		if diceBonusService then
			diceBonusService.SetPlayerDiceBonus(player, bonusAmount)

			-- บันทึกว่าได้ใช้ไอเทม DiceBonus ในเทิร์นนี้แล้ว
			playerDiceBonusUses[player.UserId] = {
				itemId = "test_dice_bonus",
				bonusAmount = bonusAmount,
				timestamp = os.time()
			}

			print("[InventoryService] ทดสอบตั้งค่าโบนัสลูกเต๋า +" .. bonusAmount .. " สำหรับ " .. player.Name)
			return true
		else
			warn("[InventoryService] ไม่พบ DiceBonusService")
			return false
		end
	end
end

-- Start the initialization
init()

return InventoryService
