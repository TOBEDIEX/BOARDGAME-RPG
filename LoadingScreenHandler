-- LoadingScreenHandler.lua
-- Manages game loading screen and player status display
-- Version: 3.1.1 (Fixed Function Declaration)

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local ContentProvider = game:GetService("ContentProvider")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

-- Get current player
local player = Players.LocalPlayer
if not player then
	Players:GetPropertyChangedSignal("LocalPlayer"):Wait()
	player = Players.LocalPlayer
end

-- UI References
local PlayerGui, LoadingScreen, Background, LoadingBarFrame, LoadingBarFill
local LoadingText, PlayersReadyText

-- RemoteEvents References
local remotes = {}

-- Loading state
local loadingState = {
	assetsProgress = 0,
	playersReady = 0,
	totalPlayers = 0,
	minRequired = 2,
	maxPlayers = 4,
	isAssetsLoaded = false,
	allPlayersReady = false,
	assetLoadedSent = false,
	autoReadyTimerId = nil
}

-- Track connections
local connections = {}

-- UI animation settings
local tweenInfo = {
	fast = TweenInfo.new(0.2, Enum.EasingStyle.Quad),
	normal = TweenInfo.new(0.5, Enum.EasingStyle.Quad),
	slow = TweenInfo.new(0.8, Enum.EasingStyle.Quad)
}

-- Update frequency control
local lastUpdateTime = 0
local updateThreshold = 0.05 -- 50ms

-- Forward declaration of functions
local startAutoReadySystem, sendReadySignal, checkIfReadyToAdvance

-- Clean up connections
local function cleanupConnections()
	for _, connection in ipairs(connections) do
		if typeof(connection) == "RBXScriptConnection" and connection.Connected then
			connection:Disconnect()
		end
	end
	connections = {}
end

-- Helper to create tweens
local function createTween(object, properties, duration)
	local tweenInfo = TweenInfo.new(duration or 0.5, Enum.EasingStyle.Quad)
	return TweenService:Create(object, tweenInfo, properties)
end

-- Initialize UI with validation
local function initializeUI()
	-- Get PlayerGui with validation
	PlayerGui = player:WaitForChild("PlayerGui", 10)
	if not PlayerGui then
		warn("LoadingScreenHandler: PlayerGui not found")
		return false
	end

	-- Get LoadingScreen UI
	LoadingScreen = PlayerGui:WaitForChild("LoadingScreen", 5)
	if not LoadingScreen then
		warn("LoadingScreenHandler: LoadingScreen not found")
		return false
	end

	-- Get UI components
	Background = LoadingScreen:WaitForChild("Background", 3)
	if not Background then return false end

	LoadingBarFrame = Background:WaitForChild("LoadingBarFrame", 2)
	LoadingBarFill = LoadingBarFrame and LoadingBarFrame:WaitForChild("LoadingBarFill", 1)
	LoadingText = Background:WaitForChild("LoadingText", 2)
	PlayersReadyText = Background:WaitForChild("PlayersReadyText", 2)

	-- Verify all essential UI components
	if not LoadingBarFill or not LoadingText or not PlayersReadyText then
		warn("LoadingScreenHandler: Some UI components missing")
		return false
	end

	-- Set initial values
	LoadingBarFill.Size = UDim2.new(0, 0, 1, 0)
	LoadingText.Text = "Loading game... 0%"
	PlayersReadyText.Text = "Players ready: 0/0"

	-- Show LoadingScreen and hide other UIs
	LoadingScreen.Enabled = true
	for _, gui in pairs(PlayerGui:GetChildren()) do
		if gui:IsA("ScreenGui") and gui ~= LoadingScreen then
			gui.Enabled = false
		end
	end

	return true
end

-- Connect to RemoteEvents
local function connectRemoteEvents()
	-- Get RemoteEvents folders
	local remotesFolder = ReplicatedStorage:WaitForChild("Remotes", 10)
	if not remotesFolder then return false end

	local uiRemotes = remotesFolder:WaitForChild("UIRemotes", 5)
	local gameRemotes = remotesFolder:WaitForChild("GameRemotes", 5)
	if not uiRemotes or not gameRemotes then return false end

	-- Reference RemoteEvents
	remotes.updateLoading = uiRemotes:WaitForChild("UpdateLoading", 3)
	remotes.updatePlayersReady = uiRemotes:WaitForChild("UpdatePlayersReady", 3)
	remotes.showClassSelection = uiRemotes:WaitForChild("ShowClassSelection", 3)
	remotes.assetsLoaded = gameRemotes:WaitForChild("AssetsLoaded", 3)

	-- Validate connections
	if not remotes.updateLoading or not remotes.updatePlayersReady or 
		not remotes.showClassSelection or not remotes.assetsLoaded then
		warn("LoadingScreenHandler: Some RemoteEvents missing")
		return false
	end

	return true
end

-- Update loading progress with debounce
local function updateLoadingProgress(progress)
	-- Control update frequency
	local currentTime = tick()
	if currentTime - lastUpdateTime < updateThreshold then return end
	lastUpdateTime = currentTime

	-- Record progress
	loadingState.assetsProgress = progress

	-- Update LoadingBar with tween
	createTween(LoadingBarFill, {Size = UDim2.new(progress, 0, 1, 0)}, 0.2):Play()

	-- Update text
	LoadingText.Text = "Loading game... " .. math.floor(progress * 100) .. "%"

	-- Check if loading complete
	if progress >= 1 then
		loadingState.isAssetsLoaded = true
		LoadingText.Text = "Loading complete 100%"
		checkIfReadyToAdvance()
	end
end

-- Update player ready status
local function updatePlayersReadyStatus(playersReady, totalPlayers)
	-- Validate received values
	if type(playersReady) ~= "number" or type(totalPlayers) ~= "number" then return end

	-- Skip updates if no changes
	if loadingState.playersReady == playersReady and loadingState.totalPlayers == totalPlayers then
		return
	end

	-- Record new state
	loadingState.playersReady = playersReady
	loadingState.totalPlayers = totalPlayers

	-- Count actual players for accuracy
	local actualPlayerCount = #Players:GetPlayers()
	if totalPlayers ~= actualPlayerCount then
		totalPlayers = actualPlayerCount
		loadingState.totalPlayers = actualPlayerCount
	end

	-- Update text
	if PlayersReadyText then
		PlayersReadyText.Text = "Players ready: " .. playersReady .. "/" .. totalPlayers
	end

	-- Check if all players ready and enough players
	loadingState.allPlayersReady = (playersReady >= totalPlayers and totalPlayers >= loadingState.minRequired)

	-- Update text color based on status
	if PlayersReadyText then
		if loadingState.allPlayersReady then
			PlayersReadyText.TextColor3 = Color3.fromRGB(0, 255, 0) -- Green
		elseif totalPlayers < loadingState.minRequired then
			PlayersReadyText.TextColor3 = Color3.fromRGB(255, 0, 0) -- Red
		else
			PlayersReadyText.TextColor3 = Color3.fromRGB(255, 255, 0) -- Yellow
		end
	end

	-- Check if ready to advance
	checkIfReadyToAdvance()
end

-- Send ready signal to Server
sendReadySignal = function(forceReady)
	if not remotes.assetsLoaded then return false end

	if loadingState.isAssetsLoaded or forceReady then
		remotes.assetsLoaded:FireServer()
		return true
	end

	return false
end

-- Auto-ready system
startAutoReadySystem = function()
	-- Cancel previous timer
	if loadingState.autoReadyTimerId then return end

	loadingState.autoReadyTimerId = true
	spawn(function()
		while true do
			if loadingState.isAssetsLoaded and LoadingScreen and LoadingScreen.Enabled then
				sendReadySignal(true)
				wait(2)
			else
				break
			end
		end
	end)
end

-- Check if ready for next screen
checkIfReadyToAdvance = function()
	if loadingState.isAssetsLoaded and loadingState.allPlayersReady then
		-- Show ready message
		LoadingText.Text = "Ready to start game!"
		LoadingText.TextColor3 = Color3.fromRGB(0, 255, 0)

		-- Send ready signal
		if not loadingState.assetLoadedSent then
			loadingState.assetLoadedSent = true
			sendReadySignal(true)
			startAutoReadySystem()
		end
	end
end

-- Transition to class selection
local function transitionToClassSelection()
	-- Fade out LoadingScreen
	local fadeOutTween = createTween(Background, {BackgroundTransparency = 1}, 0.5)
	fadeOutTween:Play()

	fadeOutTween.Completed:Connect(function()
		-- Disable LoadingScreen
		LoadingScreen.Enabled = false

		-- Look for class selection screen
		local ClassSelection = PlayerGui:WaitForChild("ClassSelection", 5)
		if ClassSelection then
			-- Enable class selection with fade in
			ClassSelection.Enabled = true

			local classBackground = ClassSelection:FindFirstChild("Background")
			if classBackground then
				classBackground.BackgroundTransparency = 1
				createTween(classBackground, {BackgroundTransparency = 0}, 0.5):Play()
			end
		else
			warn("LoadingScreenHandler: Class selection screen not found")
		end

		-- Clean up
		cleanupConnections()
	end)
end

-- Load assets with progress display
local function preloadAssets()
	-- Start loading
	updateLoadingProgress(0)

	-- Group assets by type
	local assetsToLoad = {
		images = {},
		sounds = {},
		meshes = {},
		others = {}
	}

	-- Find main UIs to preload
	local uiToPreload = {
		PlayerGui:FindFirstChild("ClassSelection"),
		PlayerGui:FindFirstChild("MainGameUI"),
		PlayerGui:FindFirstChild("PopupUI"),
		PlayerGui:FindFirstChild("GameOverScreen")
	}

	-- Count total assets
	local totalAssets = 0

	-- Collect assets
	for _, ui in ipairs(uiToPreload) do
		if ui then
			for _, descendant in ipairs(ui:GetDescendants()) do
				local assetType = "others"

				if descendant:IsA("ImageLabel") or descendant:IsA("ImageButton") then
					assetType = "images"
				elseif descendant:IsA("Sound") then
					assetType = "sounds"
				elseif descendant:IsA("MeshPart") or descendant:IsA("SpecialMesh") then
					assetType = "meshes"
				elseif descendant:IsA("Decal") or descendant:IsA("Texture") then
					assetType = "images"
				end

				if assetType ~= "others" or descendant:IsA("Script") or descendant:IsA("LocalScript") then
					table.insert(assetsToLoad[assetType], descendant)
					totalAssets = totalAssets + 1
				end
			end
		end
	end

	-- If no assets to load
	if totalAssets == 0 then
		updateLoadingProgress(1)
		wait(0.5)
		loadingState.isAssetsLoaded = true
		checkIfReadyToAdvance()
		return
	end

	-- Simulated progress system
	local startTime = tick()
	local simulatedProgress = 0
	local progressConnection = nil

	-- Simulate progress if ContentProvider doesn't report
	progressConnection = RunService.Heartbeat:Connect(function()
		local elapsed = tick() - startTime
		local maxTime = 8 -- Maximum expected loading time

		-- Increase progress towards 90%
		simulatedProgress = math.min(0.9, (elapsed / maxTime) * 1.5)
		updateLoadingProgress(simulatedProgress)
	end)

	table.insert(connections, progressConnection)

	-- Assets loaded counter
	local loadedAssets = 0

	-- Batch loading function
	local function loadBatch(assets, batchName)
		if #assets == 0 then return end

		local success = pcall(function()
			ContentProvider:PreloadAsync(assets)
		end)

		loadedAssets = loadedAssets + #assets
		local actualProgress = loadedAssets / totalAssets

		-- Never decrease progress
		simulatedProgress = math.max(simulatedProgress, actualProgress * 0.9)
		updateLoadingProgress(simulatedProgress)

		wait(0.05) -- Brief pause
	end

	-- Load each batch
	loadBatch(assetsToLoad.images, "Images")
	loadBatch(assetsToLoad.sounds, "Sounds")
	loadBatch(assetsToLoad.meshes, "Models")
	loadBatch(assetsToLoad.others, "Others")

	-- Cancel progress simulation
	if progressConnection then
		progressConnection:Disconnect()
		progressConnection = nil
	end

	-- Show 100% completion
	updateLoadingProgress(1)

	-- Pause to show completion
	wait(0.5)

	-- Set assets loaded state
	loadingState.isAssetsLoaded = true
	checkIfReadyToAdvance()
end

-- Setup event connections
local function setupEventConnections()
	-- Clear previous connections
	cleanupConnections()

	-- Connect to RemoteEvents
	if remotes.updateLoading then
		local connection = remotes.updateLoading.OnClientEvent:Connect(updateLoadingProgress)
		table.insert(connections, connection)
	end

	if remotes.updatePlayersReady then
		local connection = remotes.updatePlayersReady.OnClientEvent:Connect(updatePlayersReadyStatus)
		table.insert(connections, connection)
	end

	if remotes.showClassSelection then
		local connection = remotes.showClassSelection.OnClientEvent:Connect(transitionToClassSelection)
		table.insert(connections, connection)
	end

	-- Track player count changes
	local connection = Players.PlayerAdded:Connect(function()
		local currentPlayers = #Players:GetPlayers()
		updatePlayersReadyStatus(loadingState.playersReady, currentPlayers)
	end)
	table.insert(connections, connection)

	connection = Players.PlayerRemoving:Connect(function()
		wait()
		local currentPlayers = #Players:GetPlayers()
		updatePlayersReadyStatus(loadingState.playersReady, currentPlayers)
	end)
	table.insert(connections, connection)

	-- F9 key to accelerate loading (for testing)
	connection = UserInputService.InputBegan:Connect(function(input)
		if input.KeyCode == Enum.KeyCode.F9 and loadingState.assetsProgress < 1 then
			updateLoadingProgress(1)
		end
	end)
	table.insert(connections, connection)
end

-- Main initialization
local function initialize()
	-- Setup UI
	if not initializeUI() then
		warn("LoadingScreenHandler: Unable to initialize UI")
		return
	end

	-- Connect to RemoteEvents
	if not connectRemoteEvents() then
		warn("LoadingScreenHandler: Unable to connect to RemoteEvents")
		return
	end

	-- Setup event connections
	setupEventConnections()

	-- Start loading assets
	preloadAssets()

	-- Start auto-ready system after delay
	spawn(function()
		wait(5)
		if not loadingState.allPlayersReady and loadingState.isAssetsLoaded then
			sendReadySignal(true)
			startAutoReadySystem()
		end
	end)
end

-- Cleanup on player leave
Players.PlayerRemoving:Connect(function(plr)
	if plr == player then
		cleanupConnections()
	end
end)

-- Start system
initialize()
